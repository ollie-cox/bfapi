// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bfapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8e2f8dd8DecodeGithubComTarbBfapi(in *jlexer.Lexer, out *UpdateOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]UpdateInstruction, 0, 2)
					} else {
						out.Instructions = []UpdateInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UpdateInstruction
					(v1).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi(out *jwriter.Writer, in UpdateOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		const prefix string = ",\"instructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Instructions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi1(in *jlexer.Lexer, out *UpdateInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "instruction":
			(out.Instruction).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi1(out *jwriter.Writer, in UpdateInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if true {
		const prefix string = ",\"instruction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Instruction).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi1(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi2(in *jlexer.Lexer, out *UpdateInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betId":
			out.BetID = string(in.String())
		case "newPersistenceType":
			out.NewPersistenceType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi2(out *jwriter.Writer, in UpdateInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetID != "" {
		const prefix string = ",\"betId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetID))
	}
	if in.NewPersistenceType != "" {
		const prefix string = ",\"newPersistenceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewPersistenceType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi2(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi3(in *jlexer.Lexer, out *UpdateExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]UpdateInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []UpdateInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UpdateInstructionReport
					(v4).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi3(out *jwriter.Writer, in UpdateExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.InstructionReports) != 0 {
		const prefix string = ",\"instructionReports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.InstructionReports {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi3(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi4(in *jlexer.Lexer, out *TimeRange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.To).UnmarshalJSON(data))
			}
		case "from":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.From).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi4(out *jwriter.Writer, in TimeRange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.To).MarshalJSON())
	}
	{
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.From).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeRange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeRange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeRange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeRange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi4(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi5(in *jlexer.Lexer, out *StartingPrices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nearPrice":
			out.NearPrice = float64(in.Float64())
		case "farPrice":
			out.FarPrice = float64(in.Float64())
		case "backStakeTaken":
			if in.IsNull() {
				in.Skip()
				out.BackStakeTaken = nil
			} else {
				in.Delim('[')
				if out.BackStakeTaken == nil {
					if !in.IsDelim(']') {
						out.BackStakeTaken = make([]PriceSize, 0, 4)
					} else {
						out.BackStakeTaken = []PriceSize{}
					}
				} else {
					out.BackStakeTaken = (out.BackStakeTaken)[:0]
				}
				for !in.IsDelim(']') {
					var v7 PriceSize
					(v7).UnmarshalEasyJSON(in)
					out.BackStakeTaken = append(out.BackStakeTaken, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "layLiabilityTaken":
			if in.IsNull() {
				in.Skip()
				out.LayLiabilityTaken = nil
			} else {
				in.Delim('[')
				if out.LayLiabilityTaken == nil {
					if !in.IsDelim(']') {
						out.LayLiabilityTaken = make([]PriceSize, 0, 4)
					} else {
						out.LayLiabilityTaken = []PriceSize{}
					}
				} else {
					out.LayLiabilityTaken = (out.LayLiabilityTaken)[:0]
				}
				for !in.IsDelim(']') {
					var v8 PriceSize
					(v8).UnmarshalEasyJSON(in)
					out.LayLiabilityTaken = append(out.LayLiabilityTaken, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actualSP":
			out.ActualSP = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi5(out *jwriter.Writer, in StartingPrices) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NearPrice != 0 {
		const prefix string = ",\"nearPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.NearPrice))
	}
	if in.FarPrice != 0 {
		const prefix string = ",\"farPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FarPrice))
	}
	if len(in.BackStakeTaken) != 0 {
		const prefix string = ",\"backStakeTaken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.BackStakeTaken {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.LayLiabilityTaken) != 0 {
		const prefix string = ",\"layLiabilityTaken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.LayLiabilityTaken {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ActualSP != 0 {
		const prefix string = ",\"actualSP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ActualSP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartingPrices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartingPrices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartingPrices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartingPrices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi5(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi6(in *jlexer.Lexer, out *StartingPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "backStakeTaken":
			if in.IsNull() {
				in.Skip()
				out.BackStakeTaken = nil
			} else {
				in.Delim('[')
				if out.BackStakeTaken == nil {
					if !in.IsDelim(']') {
						out.BackStakeTaken = make([]PriceSize, 0, 4)
					} else {
						out.BackStakeTaken = []PriceSize{}
					}
				} else {
					out.BackStakeTaken = (out.BackStakeTaken)[:0]
				}
				for !in.IsDelim(']') {
					var v13 PriceSize
					(v13).UnmarshalEasyJSON(in)
					out.BackStakeTaken = append(out.BackStakeTaken, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "layLiabilityTaken":
			if in.IsNull() {
				in.Skip()
				out.LayLiabilityTaken = nil
			} else {
				in.Delim('[')
				if out.LayLiabilityTaken == nil {
					if !in.IsDelim(']') {
						out.LayLiabilityTaken = make([]PriceSize, 0, 4)
					} else {
						out.LayLiabilityTaken = []PriceSize{}
					}
				} else {
					out.LayLiabilityTaken = (out.LayLiabilityTaken)[:0]
				}
				for !in.IsDelim(']') {
					var v14 PriceSize
					(v14).UnmarshalEasyJSON(in)
					out.LayLiabilityTaken = append(out.LayLiabilityTaken, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actualSP":
			out.ActualSP = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi6(out *jwriter.Writer, in StartingPrice) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.BackStakeTaken) != 0 {
		const prefix string = ",\"backStakeTaken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.BackStakeTaken {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.LayLiabilityTaken) != 0 {
		const prefix string = ",\"layLiabilityTaken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.LayLiabilityTaken {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ActualSP != 0 {
		const prefix string = ",\"actualSP\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ActualSP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartingPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartingPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartingPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartingPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi6(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi7(in *jlexer.Lexer, out *RunnerMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SIRE_NAME":
			if in.IsNull() {
				in.Skip()
				out.SireName = nil
			} else {
				if out.SireName == nil {
					out.SireName = new(string)
				}
				*out.SireName = string(in.String())
			}
		case "CLOTH_NUMBER_ALPHA":
			if in.IsNull() {
				in.Skip()
				out.ClothNumberAlpha = nil
			} else {
				if out.ClothNumberAlpha == nil {
					out.ClothNumberAlpha = new(string)
				}
				*out.ClothNumberAlpha = string(in.String())
			}
		case "OFFICIAL_RATING":
			if in.IsNull() {
				in.Skip()
				out.OfficialRating = nil
			} else {
				if out.OfficialRating == nil {
					out.OfficialRating = new(string)
				}
				*out.OfficialRating = string(in.String())
			}
		case "COLOURS_DESCRIPTION":
			if in.IsNull() {
				in.Skip()
				out.ColoursDescription = nil
			} else {
				if out.ColoursDescription == nil {
					out.ColoursDescription = new(string)
				}
				*out.ColoursDescription = string(in.String())
			}
		case "COLOURS_FILENAME":
			if in.IsNull() {
				in.Skip()
				out.ColoursFileName = nil
			} else {
				if out.ColoursFileName == nil {
					out.ColoursFileName = new(string)
				}
				*out.ColoursFileName = string(in.String())
			}
		case "FORECASTPRICE_DENOMINATOR":
			if in.IsNull() {
				in.Skip()
				out.ForecastPriceDenominator = nil
			} else {
				if out.ForecastPriceDenominator == nil {
					out.ForecastPriceDenominator = new(string)
				}
				*out.ForecastPriceDenominator = string(in.String())
			}
		case "DAMSIRE_NAME":
			if in.IsNull() {
				in.Skip()
				out.DamSireName = nil
			} else {
				if out.DamSireName == nil {
					out.DamSireName = new(string)
				}
				*out.DamSireName = string(in.String())
			}
		case "WEIGHT_VALUE":
			if in.IsNull() {
				in.Skip()
				out.WeightValue = nil
			} else {
				if out.WeightValue == nil {
					out.WeightValue = new(string)
				}
				*out.WeightValue = string(in.String())
			}
		case "SEX_TYPE":
			if in.IsNull() {
				in.Skip()
				out.SexType = nil
			} else {
				if out.SexType == nil {
					out.SexType = new(string)
				}
				*out.SexType = string(in.String())
			}
		case "DAYS_SINCE_LAST_RUN":
			if in.IsNull() {
				in.Skip()
				out.DaysSinceLastRun = nil
			} else {
				if out.DaysSinceLastRun == nil {
					out.DaysSinceLastRun = new(string)
				}
				*out.DaysSinceLastRun = string(in.String())
			}
		case "WEARING":
			if in.IsNull() {
				in.Skip()
				out.Wearing = nil
			} else {
				if out.Wearing == nil {
					out.Wearing = new(string)
				}
				*out.Wearing = string(in.String())
			}
		case "OWNER_NAME":
			if in.IsNull() {
				in.Skip()
				out.OwnerName = nil
			} else {
				if out.OwnerName == nil {
					out.OwnerName = new(string)
				}
				*out.OwnerName = string(in.String())
			}
		case "DAM_YEAR_BORN":
			if in.IsNull() {
				in.Skip()
				out.DamYearBorn = nil
			} else {
				if out.DamYearBorn == nil {
					out.DamYearBorn = new(string)
				}
				*out.DamYearBorn = string(in.String())
			}
		case "SIRE_BRED":
			if in.IsNull() {
				in.Skip()
				out.SireBred = nil
			} else {
				if out.SireBred == nil {
					out.SireBred = new(string)
				}
				*out.SireBred = string(in.String())
			}
		case "JOCKEY_NAME":
			if in.IsNull() {
				in.Skip()
				out.JockeyName = nil
			} else {
				if out.JockeyName == nil {
					out.JockeyName = new(string)
				}
				*out.JockeyName = string(in.String())
			}
		case "DAM_BRED":
			if in.IsNull() {
				in.Skip()
				out.DamBred = nil
			} else {
				if out.DamBred == nil {
					out.DamBred = new(string)
				}
				*out.DamBred = string(in.String())
			}
		case "ADJUSTED_RATING":
			if in.IsNull() {
				in.Skip()
				out.AdjustedRating = nil
			} else {
				if out.AdjustedRating == nil {
					out.AdjustedRating = new(string)
				}
				*out.AdjustedRating = string(in.String())
			}
		case "runnerId":
			if in.IsNull() {
				in.Skip()
				out.RunnerID = nil
			} else {
				if out.RunnerID == nil {
					out.RunnerID = new(string)
				}
				*out.RunnerID = string(in.String())
			}
		case "CLOTH_NUMBER":
			if in.IsNull() {
				in.Skip()
				out.ClothNumber = nil
			} else {
				if out.ClothNumber == nil {
					out.ClothNumber = new(string)
				}
				*out.ClothNumber = string(in.String())
			}
		case "SIRE_YEAR_BORN":
			if in.IsNull() {
				in.Skip()
				out.SireYearBorn = nil
			} else {
				if out.SireYearBorn == nil {
					out.SireYearBorn = new(string)
				}
				*out.SireYearBorn = string(in.String())
			}
		case "TRAINER_NAME":
			if in.IsNull() {
				in.Skip()
				out.TrainerName = nil
			} else {
				if out.TrainerName == nil {
					out.TrainerName = new(string)
				}
				*out.TrainerName = string(in.String())
			}
		case "COLOUR_TYPE":
			if in.IsNull() {
				in.Skip()
				out.ColourType = nil
			} else {
				if out.ColourType == nil {
					out.ColourType = new(string)
				}
				*out.ColourType = string(in.String())
			}
		case "AGE":
			if in.IsNull() {
				in.Skip()
				out.Age = nil
			} else {
				if out.Age == nil {
					out.Age = new(string)
				}
				*out.Age = string(in.String())
			}
		case "DAMSIRE_BRED":
			if in.IsNull() {
				in.Skip()
				out.DamsireBred = nil
			} else {
				if out.DamsireBred == nil {
					out.DamsireBred = new(string)
				}
				*out.DamsireBred = string(in.String())
			}
		case "JOCKEY_CLAIM":
			if in.IsNull() {
				in.Skip()
				out.JockeyClaim = nil
			} else {
				if out.JockeyClaim == nil {
					out.JockeyClaim = new(string)
				}
				*out.JockeyClaim = string(in.String())
			}
		case "FORM":
			if in.IsNull() {
				in.Skip()
				out.Form = nil
			} else {
				if out.Form == nil {
					out.Form = new(string)
				}
				*out.Form = string(in.String())
			}
		case "FORECASTPRICE_NUMERATOR":
			if in.IsNull() {
				in.Skip()
				out.ForecastPriceNumerator = nil
			} else {
				if out.ForecastPriceNumerator == nil {
					out.ForecastPriceNumerator = new(string)
				}
				*out.ForecastPriceNumerator = string(in.String())
			}
		case "BRED":
			if in.IsNull() {
				in.Skip()
				out.Bred = nil
			} else {
				if out.Bred == nil {
					out.Bred = new(string)
				}
				*out.Bred = string(in.String())
			}
		case "DAM_NAME":
			if in.IsNull() {
				in.Skip()
				out.DamName = nil
			} else {
				if out.DamName == nil {
					out.DamName = new(string)
				}
				*out.DamName = string(in.String())
			}
		case "DAMSIRE_YEAR_BORN":
			if in.IsNull() {
				in.Skip()
				out.DamSireYearBorn = nil
			} else {
				if out.DamSireYearBorn == nil {
					out.DamSireYearBorn = new(string)
				}
				*out.DamSireYearBorn = string(in.String())
			}
		case "STALL_DRAW":
			if in.IsNull() {
				in.Skip()
				out.StallDraw = nil
			} else {
				if out.StallDraw == nil {
					out.StallDraw = new(string)
				}
				*out.StallDraw = string(in.String())
			}
		case "WEIGHT_UNITS":
			if in.IsNull() {
				in.Skip()
				out.WeightUnits = nil
			} else {
				if out.WeightUnits == nil {
					out.WeightUnits = new(string)
				}
				*out.WeightUnits = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi7(out *jwriter.Writer, in RunnerMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SireName != nil {
		const prefix string = ",\"SIRE_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SireName))
	}
	if in.ClothNumberAlpha != nil {
		const prefix string = ",\"CLOTH_NUMBER_ALPHA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ClothNumberAlpha))
	}
	if in.OfficialRating != nil {
		const prefix string = ",\"OFFICIAL_RATING\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OfficialRating))
	}
	if in.ColoursDescription != nil {
		const prefix string = ",\"COLOURS_DESCRIPTION\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ColoursDescription))
	}
	if in.ColoursFileName != nil {
		const prefix string = ",\"COLOURS_FILENAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ColoursFileName))
	}
	if in.ForecastPriceDenominator != nil {
		const prefix string = ",\"FORECASTPRICE_DENOMINATOR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ForecastPriceDenominator))
	}
	if in.DamSireName != nil {
		const prefix string = ",\"DAMSIRE_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DamSireName))
	}
	if in.WeightValue != nil {
		const prefix string = ",\"WEIGHT_VALUE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WeightValue))
	}
	if in.SexType != nil {
		const prefix string = ",\"SEX_TYPE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SexType))
	}
	if in.DaysSinceLastRun != nil {
		const prefix string = ",\"DAYS_SINCE_LAST_RUN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DaysSinceLastRun))
	}
	if in.Wearing != nil {
		const prefix string = ",\"WEARING\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Wearing))
	}
	if in.OwnerName != nil {
		const prefix string = ",\"OWNER_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OwnerName))
	}
	if in.DamYearBorn != nil {
		const prefix string = ",\"DAM_YEAR_BORN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DamYearBorn))
	}
	if in.SireBred != nil {
		const prefix string = ",\"SIRE_BRED\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SireBred))
	}
	if in.JockeyName != nil {
		const prefix string = ",\"JOCKEY_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JockeyName))
	}
	if in.DamBred != nil {
		const prefix string = ",\"DAM_BRED\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DamBred))
	}
	if in.AdjustedRating != nil {
		const prefix string = ",\"ADJUSTED_RATING\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AdjustedRating))
	}
	if in.RunnerID != nil {
		const prefix string = ",\"runnerId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RunnerID))
	}
	if in.ClothNumber != nil {
		const prefix string = ",\"CLOTH_NUMBER\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ClothNumber))
	}
	if in.SireYearBorn != nil {
		const prefix string = ",\"SIRE_YEAR_BORN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SireYearBorn))
	}
	if in.TrainerName != nil {
		const prefix string = ",\"TRAINER_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.TrainerName))
	}
	if in.ColourType != nil {
		const prefix string = ",\"COLOUR_TYPE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ColourType))
	}
	if in.Age != nil {
		const prefix string = ",\"AGE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Age))
	}
	if in.DamsireBred != nil {
		const prefix string = ",\"DAMSIRE_BRED\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DamsireBred))
	}
	if in.JockeyClaim != nil {
		const prefix string = ",\"JOCKEY_CLAIM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.JockeyClaim))
	}
	if in.Form != nil {
		const prefix string = ",\"FORM\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Form))
	}
	if in.ForecastPriceNumerator != nil {
		const prefix string = ",\"FORECASTPRICE_NUMERATOR\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ForecastPriceNumerator))
	}
	if in.Bred != nil {
		const prefix string = ",\"BRED\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Bred))
	}
	if in.DamName != nil {
		const prefix string = ",\"DAM_NAME\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DamName))
	}
	if in.DamSireYearBorn != nil {
		const prefix string = ",\"DAMSIRE_YEAR_BORN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DamSireYearBorn))
	}
	if in.StallDraw != nil {
		const prefix string = ",\"STALL_DRAW\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StallDraw))
	}
	if in.WeightUnits != nil {
		const prefix string = ",\"WEIGHT_UNITS\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WeightUnits))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi7(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi8(in *jlexer.Lexer, out *RunnerCatalogue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selectionId":
			out.SelectionID = int64(in.Int64())
		case "runnerName":
			out.RunnerName = string(in.String())
		case "handicap":
			out.Handicap = float64(in.Float64())
		case "sortPriority":
			out.SortPriority = int(in.Int())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(RunnerMetadata)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi8(out *jwriter.Writer, in RunnerCatalogue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelectionID != 0 {
		const prefix string = ",\"selectionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SelectionID))
	}
	if in.RunnerName != "" {
		const prefix string = ",\"runnerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RunnerName))
	}
	if in.Handicap != 0 {
		const prefix string = ",\"handicap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Handicap))
	}
	if in.SortPriority != 0 {
		const prefix string = ",\"sortPriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SortPriority))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerCatalogue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerCatalogue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerCatalogue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerCatalogue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi8(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi9(in *jlexer.Lexer, out *Runner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selectionId":
			out.SelectionID = int64(in.Int64())
		case "handicap":
			out.Handicap = float64(in.Float64())
		case "status":
			out.Status = string(in.String())
		case "adjustmentFactor":
			out.AdjustmentFactor = float64(in.Float64())
		case "lastPriceTraded":
			out.LastPriceTraded = float64(in.Float64())
		case "totalMatched":
			out.TotalMatched = float64(in.Float64())
		case "removalDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RemovalDate).UnmarshalJSON(data))
			}
		case "sp":
			(out.Sp).UnmarshalEasyJSON(in)
		case "ex":
			(out.Ex).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi9(out *jwriter.Writer, in Runner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelectionID != 0 {
		const prefix string = ",\"selectionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SelectionID))
	}
	if in.Handicap != 0 {
		const prefix string = ",\"handicap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Handicap))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.AdjustmentFactor != 0 {
		const prefix string = ",\"adjustmentFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AdjustmentFactor))
	}
	if in.LastPriceTraded != 0 {
		const prefix string = ",\"lastPriceTraded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.LastPriceTraded))
	}
	if in.TotalMatched != 0 {
		const prefix string = ",\"totalMatched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalMatched))
	}
	if true {
		const prefix string = ",\"removalDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.RemovalDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"sp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Sp).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"ex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Ex).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Runner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Runner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Runner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Runner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi9(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi10(in *jlexer.Lexer, out *ReplaceOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]ReplaceInstruction, 0, 2)
					} else {
						out.Instructions = []ReplaceInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v19 ReplaceInstruction
					(v19).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketVersion":
			(out.MarketVersion).UnmarshalEasyJSON(in)
		case "async":
			out.Async = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi10(out *jwriter.Writer, in ReplaceOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		const prefix string = ",\"instructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Instructions {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if true {
		const prefix string = ",\"marketVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.MarketVersion).MarshalEasyJSON(out)
	}
	if in.Async {
		const prefix string = ",\"async\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Async))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi10(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi11(in *jlexer.Lexer, out *ReplaceInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "cancelInstructionReport":
			(out.CancelInstructionReport).UnmarshalEasyJSON(in)
		case "placeInstructionReport":
			(out.PlaceInstructionReport).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi11(out *jwriter.Writer, in ReplaceInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if true {
		const prefix string = ",\"cancelInstructionReport\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.CancelInstructionReport).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"placeInstructionReport\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PlaceInstructionReport).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi11(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi12(in *jlexer.Lexer, out *ReplaceInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betId":
			out.BetID = string(in.String())
		case "newPrice":
			out.NewPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi12(out *jwriter.Writer, in ReplaceInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetID != "" {
		const prefix string = ",\"betId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetID))
	}
	if in.NewPrice != 0 {
		const prefix string = ",\"newPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.NewPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi12(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi13(in *jlexer.Lexer, out *ReplaceExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]ReplaceInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []ReplaceInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ReplaceInstructionReport
					(v22).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi13(out *jwriter.Writer, in ReplaceExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.InstructionReports) != 0 {
		const prefix string = ",\"instructionReports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.InstructionReports {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi13(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi14(in *jlexer.Lexer, out *PriceSize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = float64(in.Float64())
		case "size":
			out.Size = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi14(out *jwriter.Writer, in PriceSize) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Price != 0 {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Price))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceSize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceSize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceSize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceSize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi14(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi15(in *jlexer.Lexer, out *PriceProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "priceData":
			if in.IsNull() {
				in.Skip()
				out.PriceData = nil
			} else {
				in.Delim('[')
				if out.PriceData == nil {
					if !in.IsDelim(']') {
						out.PriceData = make([]string, 0, 4)
					} else {
						out.PriceData = []string{}
					}
				} else {
					out.PriceData = (out.PriceData)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.PriceData = append(out.PriceData, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exBestOffersOverrides":
			(out.ExBestOffersOverrides).UnmarshalEasyJSON(in)
		case "virtualise":
			out.Virtualise = bool(in.Bool())
		case "rolloverStakes":
			out.RolloverStakes = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi15(out *jwriter.Writer, in PriceProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PriceData) != 0 {
		const prefix string = ",\"priceData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.PriceData {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"exBestOffersOverrides\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ExBestOffersOverrides).MarshalEasyJSON(out)
	}
	if in.Virtualise {
		const prefix string = ",\"virtualise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Virtualise))
	}
	if in.RolloverStakes {
		const prefix string = ",\"rolloverStakes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RolloverStakes))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceProjection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceProjection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceProjection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceProjection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi15(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi16(in *jlexer.Lexer, out *PriceLadderDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi16(out *jwriter.Writer, in PriceLadderDescription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceLadderDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceLadderDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceLadderDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceLadderDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi16(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi17(in *jlexer.Lexer, out *PlaceOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]PlaceInstruction, 0, 1)
					} else {
						out.Instructions = []PlaceInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v28 PlaceInstruction
					(v28).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketVersion":
			(out.MarketVersion).UnmarshalEasyJSON(in)
		case "customerStrategyRef":
			out.CustomerStrategyRef = string(in.String())
		case "async":
			out.Async = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi17(out *jwriter.Writer, in PlaceOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		const prefix string = ",\"instructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Instructions {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if true {
		const prefix string = ",\"marketVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.MarketVersion).MarshalEasyJSON(out)
	}
	if in.CustomerStrategyRef != "" {
		const prefix string = ",\"customerStrategyRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerStrategyRef))
	}
	if in.Async {
		const prefix string = ",\"async\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Async))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi17(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi18(in *jlexer.Lexer, out *PlaceOrderArg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]PlaceInstruction, 0, 1)
					} else {
						out.Instructions = []PlaceInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v31 PlaceInstruction
					(v31).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketVersion":
			out.MarketVersion = int(in.Int())
		case "customerStrategyRef":
			out.CustomerStrategyRef = string(in.String())
		case "async":
			out.Async = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi18(out *jwriter.Writer, in PlaceOrderArg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		const prefix string = ",\"instructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Instructions {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if in.MarketVersion != 0 {
		const prefix string = ",\"marketVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MarketVersion))
	}
	if in.CustomerStrategyRef != "" {
		const prefix string = ",\"customerStrategyRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerStrategyRef))
	}
	if in.Async {
		const prefix string = ",\"async\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Async))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceOrderArg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceOrderArg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceOrderArg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceOrderArg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi18(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi19(in *jlexer.Lexer, out *PlaceInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "orderStatus":
			out.OrderStatus = string(in.String())
		case "instruction":
			(out.Instruction).UnmarshalEasyJSON(in)
		case "betId":
			out.BetID = string(in.String())
		case "placedDate":
			out.PlacedDate = string(in.String())
		case "averagePriceMatched":
			out.AveragePriceMatched = int(in.Int())
		case "sizeMatched":
			out.SizeMatched = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi19(out *jwriter.Writer, in PlaceInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if in.OrderStatus != "" {
		const prefix string = ",\"orderStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderStatus))
	}
	if true {
		const prefix string = ",\"instruction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Instruction).MarshalEasyJSON(out)
	}
	if in.BetID != "" {
		const prefix string = ",\"betId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetID))
	}
	if in.PlacedDate != "" {
		const prefix string = ",\"placedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PlacedDate))
	}
	if in.AveragePriceMatched != 0 {
		const prefix string = ",\"averagePriceMatched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AveragePriceMatched))
	}
	if in.SizeMatched != 0 {
		const prefix string = ",\"sizeMatched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SizeMatched))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi19(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi20(in *jlexer.Lexer, out *PlaceInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderType":
			out.OrderType = string(in.String())
		case "selectionId":
			out.SelectionID = int64(in.Int64())
		case "handicap":
			out.Handicap = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "limitOrder":
			if in.IsNull() {
				in.Skip()
				out.LimitOrder = nil
			} else {
				if out.LimitOrder == nil {
					out.LimitOrder = new(LimitOrder)
				}
				(*out.LimitOrder).UnmarshalEasyJSON(in)
			}
		case "limitOnCloseOrder":
			if in.IsNull() {
				in.Skip()
				out.LimitOnCloseOrder = nil
			} else {
				if out.LimitOnCloseOrder == nil {
					out.LimitOnCloseOrder = new(LimitOnCloseOrder)
				}
				(*out.LimitOnCloseOrder).UnmarshalEasyJSON(in)
			}
		case "marketOnCloseOrder":
			if in.IsNull() {
				in.Skip()
				out.MarketOnCloseOrder = nil
			} else {
				if out.MarketOnCloseOrder == nil {
					out.MarketOnCloseOrder = new(MarketOnCloseOrder)
				}
				(*out.MarketOnCloseOrder).UnmarshalEasyJSON(in)
			}
		case "customerOrderRef":
			out.CustomerOrderRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi20(out *jwriter.Writer, in PlaceInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OrderType != "" {
		const prefix string = ",\"orderType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderType))
	}
	if in.SelectionID != 0 {
		const prefix string = ",\"selectionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SelectionID))
	}
	if in.Handicap != "" {
		const prefix string = ",\"handicap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Handicap))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.LimitOrder != nil {
		const prefix string = ",\"limitOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LimitOrder).MarshalEasyJSON(out)
	}
	if in.LimitOnCloseOrder != nil {
		const prefix string = ",\"limitOnCloseOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LimitOnCloseOrder).MarshalEasyJSON(out)
	}
	if in.MarketOnCloseOrder != nil {
		const prefix string = ",\"marketOnCloseOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.MarketOnCloseOrder).MarshalEasyJSON(out)
	}
	if in.CustomerOrderRef != "" {
		const prefix string = ",\"customerOrderRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerOrderRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi20(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi21(in *jlexer.Lexer, out *PlaceExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]PlaceInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []PlaceInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v34 PlaceInstructionReport
					(v34).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi21(out *jwriter.Writer, in PlaceExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if len(in.InstructionReports) != 0 {
		const prefix string = ",\"instructionReports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.InstructionReports {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi21(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi22(in *jlexer.Lexer, out *MarketVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi22(out *jwriter.Writer, in MarketVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi22(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi23(in *jlexer.Lexer, out *MarketOnCloseOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "liability":
			out.Liability = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi23(out *jwriter.Writer, in MarketOnCloseOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Liability != 0 {
		const prefix string = ",\"liability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Liability))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOnCloseOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOnCloseOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOnCloseOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOnCloseOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi23(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi24(in *jlexer.Lexer, out *MarketListFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketIds":
			if in.IsNull() {
				in.Skip()
				out.MarketIds = nil
			} else {
				in.Delim('[')
				if out.MarketIds == nil {
					if !in.IsDelim(']') {
						out.MarketIds = make([]string, 0, 4)
					} else {
						out.MarketIds = []string{}
					}
				} else {
					out.MarketIds = (out.MarketIds)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.MarketIds = append(out.MarketIds, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventTypeIds":
			if in.IsNull() {
				in.Skip()
				out.EventTypes = nil
			} else {
				in.Delim('[')
				if out.EventTypes == nil {
					if !in.IsDelim(']') {
						out.EventTypes = make([]string, 0, 4)
					} else {
						out.EventTypes = []string{}
					}
				} else {
					out.EventTypes = (out.EventTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.EventTypes = append(out.EventTypes, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketCountries":
			if in.IsNull() {
				in.Skip()
				out.Countries = nil
			} else {
				in.Delim('[')
				if out.Countries == nil {
					if !in.IsDelim(']') {
						out.Countries = make([]string, 0, 4)
					} else {
						out.Countries = []string{}
					}
				} else {
					out.Countries = (out.Countries)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Countries = append(out.Countries, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketTypeCodes":
			if in.IsNull() {
				in.Skip()
				out.TypeCodes = nil
			} else {
				in.Delim('[')
				if out.TypeCodes == nil {
					if !in.IsDelim(']') {
						out.TypeCodes = make([]string, 0, 4)
					} else {
						out.TypeCodes = []string{}
					}
				} else {
					out.TypeCodes = (out.TypeCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.TypeCodes = append(out.TypeCodes, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi24(out *jwriter.Writer, in MarketListFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MarketIds) != 0 {
		const prefix string = ",\"marketIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.MarketIds {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventTypes) != 0 {
		const prefix string = ",\"eventTypeIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.EventTypes {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if len(in.Countries) != 0 {
		const prefix string = ",\"marketCountries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.Countries {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	if len(in.TypeCodes) != 0 {
		const prefix string = ",\"marketTypeCodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.TypeCodes {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketListFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketListFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketListFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketListFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi24(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi25(in *jlexer.Lexer, out *MarketLineRangeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxUnitValue":
			out.MaxUnitValue = float64(in.Float64())
		case "minUnitValue":
			out.MinUnitValue = float64(in.Float64())
		case "interval":
			out.Interval = float64(in.Float64())
		case "marketUnit":
			out.MarketUnit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi25(out *jwriter.Writer, in MarketLineRangeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxUnitValue != 0 {
		const prefix string = ",\"maxUnitValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MaxUnitValue))
	}
	if in.MinUnitValue != 0 {
		const prefix string = ",\"minUnitValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MinUnitValue))
	}
	if in.Interval != 0 {
		const prefix string = ",\"interval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Interval))
	}
	if in.MarketUnit != "" {
		const prefix string = ",\"marketUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketUnit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketLineRangeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketLineRangeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketLineRangeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketLineRangeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi25(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi26(in *jlexer.Lexer, out *MarketDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "persistenceEnabled":
			out.PersistenceEnabled = bool(in.Bool())
		case "bspMarket":
			out.BspMarket = bool(in.Bool())
		case "marketTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketTime).UnmarshalJSON(data))
			}
		case "suspendTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SuspendTime).UnmarshalJSON(data))
			}
		case "settleTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SettleTime).UnmarshalJSON(data))
			}
		case "bettingType":
			out.BettingType = string(in.String())
		case "turnInPlayEnabled":
			out.TurnInPlayEnabled = bool(in.Bool())
		case "marketType":
			out.MarketType = string(in.String())
		case "regulator":
			out.Regulator = string(in.String())
		case "marketBaseRate":
			out.MarketBaseRate = float64(in.Float64())
		case "discountAllowed":
			out.DiscountAllowed = bool(in.Bool())
		case "wallet":
			out.Wallet = string(in.String())
		case "rules":
			out.Rules = string(in.String())
		case "rulesHasDate":
			out.RulesHasDate = bool(in.Bool())
		case "eachWayDivisor":
			out.EachWayDivisor = float64(in.Float64())
		case "clarifications":
			out.Clarifications = string(in.String())
		case "lineRangeInfo":
			(out.LineRangeInfo).UnmarshalEasyJSON(in)
		case "priceLadderDescription":
			(out.PriceLadderDescription).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi26(out *jwriter.Writer, in MarketDescription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PersistenceEnabled {
		const prefix string = ",\"persistenceEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PersistenceEnabled))
	}
	if in.BspMarket {
		const prefix string = ",\"bspMarket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BspMarket))
	}
	if true {
		const prefix string = ",\"marketTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.MarketTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"suspendTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SuspendTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"settleTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SettleTime).MarshalJSON())
	}
	if in.BettingType != "" {
		const prefix string = ",\"bettingType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BettingType))
	}
	if in.TurnInPlayEnabled {
		const prefix string = ",\"turnInPlayEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TurnInPlayEnabled))
	}
	if in.MarketType != "" {
		const prefix string = ",\"marketType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketType))
	}
	if in.Regulator != "" {
		const prefix string = ",\"regulator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Regulator))
	}
	if in.MarketBaseRate != 0 {
		const prefix string = ",\"marketBaseRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MarketBaseRate))
	}
	if in.DiscountAllowed {
		const prefix string = ",\"discountAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DiscountAllowed))
	}
	if in.Wallet != "" {
		const prefix string = ",\"wallet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Wallet))
	}
	if in.Rules != "" {
		const prefix string = ",\"rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rules))
	}
	if in.RulesHasDate {
		const prefix string = ",\"rulesHasDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RulesHasDate))
	}
	if in.EachWayDivisor != 0 {
		const prefix string = ",\"eachWayDivisor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.EachWayDivisor))
	}
	if in.Clarifications != "" {
		const prefix string = ",\"clarifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Clarifications))
	}
	if true {
		const prefix string = ",\"lineRangeInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.LineRangeInfo).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"priceLadderDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PriceLadderDescription).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi26(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi27(in *jlexer.Lexer, out *MarketCatalogue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "marketName":
			out.MarketName = string(in.String())
		case "marketStartTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketStartTime).UnmarshalJSON(data))
			}
		case "marketDescription":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(MarketDescription)
				}
				(*out.Description).UnmarshalEasyJSON(in)
			}
		case "totalMatched":
			out.TotalMatched = float64(in.Float64())
		case "runners":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]RunnerCatalogue, 0, 1)
					} else {
						out.Runners = []RunnerCatalogue{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v49 RunnerCatalogue
					(v49).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventType":
			if in.IsNull() {
				in.Skip()
				out.EventType = nil
			} else {
				if out.EventType == nil {
					out.EventType = new(EventType)
				}
				(*out.EventType).UnmarshalEasyJSON(in)
			}
		case "competition":
			if in.IsNull() {
				in.Skip()
				out.Competition = nil
			} else {
				if out.Competition == nil {
					out.Competition = new(Competition)
				}
				(*out.Competition).UnmarshalEasyJSON(in)
			}
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(Event)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi27(out *jwriter.Writer, in MarketCatalogue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if in.MarketName != "" {
		const prefix string = ",\"marketName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketName))
	}
	if true {
		const prefix string = ",\"marketStartTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.MarketStartTime).MarshalJSON())
	}
	if in.Description != nil {
		const prefix string = ",\"marketDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Description).MarshalEasyJSON(out)
	}
	if in.TotalMatched != 0 {
		const prefix string = ",\"totalMatched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalMatched))
	}
	if len(in.Runners) != 0 {
		const prefix string = ",\"runners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Runners {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.EventType != nil {
		const prefix string = ",\"eventType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EventType).MarshalEasyJSON(out)
	}
	if in.Competition != nil {
		const prefix string = ",\"competition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Competition).MarshalEasyJSON(out)
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Event).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCatalogue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCatalogue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCatalogue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCatalogue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi27(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi28(in *jlexer.Lexer, out *MarketBook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "isMarketDataDelayed":
			out.IsMarketDataDelayed = bool(in.Bool())
		case "status":
			out.Status = string(in.String())
		case "betDelay":
			out.BetDelay = int(in.Int())
		case "bspReconciled":
			out.BspReconciled = bool(in.Bool())
		case "complete":
			out.Complete = bool(in.Bool())
		case "inplay":
			out.Inplay = bool(in.Bool())
		case "numberOfWinners":
			out.NumberOfWinners = int(in.Int())
		case "numberOfRunners":
			out.NumberOfRunners = int(in.Int())
		case "numberOfActiveRunners":
			out.NumberOfActiveRunners = int(in.Int())
		case "lastMatchTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMatchTime).UnmarshalJSON(data))
			}
		case "totalMatched":
			out.TotalMatched = float64(in.Float64())
		case "totalAvailable":
			out.TotalAvailable = float64(in.Float64())
		case "crossMatching":
			out.CrossMatching = bool(in.Bool())
		case "runnersVoidable":
			out.RunnersVoidable = bool(in.Bool())
		case "version":
			out.Version = int64(in.Int64())
		case "runners":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]Runner, 0, 1)
					} else {
						out.Runners = []Runner{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Runner
					(v52).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keyLineDescription":
			out.KeyLineDescription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi28(out *jwriter.Writer, in MarketBook) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if in.IsMarketDataDelayed {
		const prefix string = ",\"isMarketDataDelayed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsMarketDataDelayed))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.BetDelay != 0 {
		const prefix string = ",\"betDelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BetDelay))
	}
	if in.BspReconciled {
		const prefix string = ",\"bspReconciled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BspReconciled))
	}
	if in.Complete {
		const prefix string = ",\"complete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Complete))
	}
	if in.Inplay {
		const prefix string = ",\"inplay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Inplay))
	}
	if in.NumberOfWinners != 0 {
		const prefix string = ",\"numberOfWinners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfWinners))
	}
	if in.NumberOfRunners != 0 {
		const prefix string = ",\"numberOfRunners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfRunners))
	}
	if in.NumberOfActiveRunners != 0 {
		const prefix string = ",\"numberOfActiveRunners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfActiveRunners))
	}
	if true {
		const prefix string = ",\"lastMatchTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastMatchTime).MarshalJSON())
	}
	if in.TotalMatched != 0 {
		const prefix string = ",\"totalMatched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalMatched))
	}
	if in.TotalAvailable != 0 {
		const prefix string = ",\"totalAvailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.TotalAvailable))
	}
	if in.CrossMatching {
		const prefix string = ",\"crossMatching\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CrossMatching))
	}
	if in.RunnersVoidable {
		const prefix string = ",\"runnersVoidable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RunnersVoidable))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if len(in.Runners) != 0 {
		const prefix string = ",\"runners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v53, v54 := range in.Runners {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.KeyLineDescription != "" {
		const prefix string = ",\"keyLineDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyLineDescription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketBook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketBook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketBook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketBook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi28(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi29(in *jlexer.Lexer, out *ListMarketCatalogueArg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sort":
			out.Sort = string(in.String())
		case "marketProjection":
			if in.IsNull() {
				in.Skip()
				out.MarketProjection = nil
			} else {
				in.Delim('[')
				if out.MarketProjection == nil {
					if !in.IsDelim(']') {
						out.MarketProjection = make([]string, 0, 4)
					} else {
						out.MarketProjection = []string{}
					}
				} else {
					out.MarketProjection = (out.MarketProjection)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.MarketProjection = append(out.MarketProjection, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxResults":
			out.MaxResults = int(in.Int())
		case "filter":
			(out.Filter).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi29(out *jwriter.Writer, in ListMarketCatalogueArg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sort != "" {
		const prefix string = ",\"sort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sort))
	}
	if len(in.MarketProjection) != 0 {
		const prefix string = ",\"marketProjection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.MarketProjection {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if in.MaxResults != 0 {
		const prefix string = ",\"maxResults\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxResults))
	}
	if true {
		const prefix string = ",\"filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Filter).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListMarketCatalogueArg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListMarketCatalogueArg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListMarketCatalogueArg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListMarketCatalogueArg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi29(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi30(in *jlexer.Lexer, out *ListMarketBookArg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketIds":
			if in.IsNull() {
				in.Skip()
				out.MarketIds = nil
			} else {
				in.Delim('[')
				if out.MarketIds == nil {
					if !in.IsDelim(']') {
						out.MarketIds = make([]string, 0, 4)
					} else {
						out.MarketIds = []string{}
					}
				} else {
					out.MarketIds = (out.MarketIds)[:0]
				}
				for !in.IsDelim(']') {
					var v58 string
					v58 = string(in.String())
					out.MarketIds = append(out.MarketIds, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "priceProjection":
			(out.PriceProjection).UnmarshalEasyJSON(in)
		case "orderProjection":
			out.OrderProjection = string(in.String())
		case "matchProjection":
			out.MatchProjection = string(in.String())
		case "includeOverallPosition":
			out.IncludeOverallPosition = bool(in.Bool())
		case "partitionMatchedByStrategyRef":
			out.PartitionMatchedByStrategyRef = bool(in.Bool())
		case "customerStrategyRefs":
			if in.IsNull() {
				in.Skip()
				out.CustomerStrategyRefs = nil
			} else {
				in.Delim('[')
				if out.CustomerStrategyRefs == nil {
					if !in.IsDelim(']') {
						out.CustomerStrategyRefs = make([]string, 0, 4)
					} else {
						out.CustomerStrategyRefs = []string{}
					}
				} else {
					out.CustomerStrategyRefs = (out.CustomerStrategyRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v59 string
					v59 = string(in.String())
					out.CustomerStrategyRefs = append(out.CustomerStrategyRefs, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currencyCode":
			out.CurrencyCode = string(in.String())
		case "locale":
			out.Locale = string(in.String())
		case "matchedSince":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MatchedSince).UnmarshalJSON(data))
			}
		case "betIds":
			if in.IsNull() {
				in.Skip()
				out.BetIds = nil
			} else {
				in.Delim('[')
				if out.BetIds == nil {
					if !in.IsDelim(']') {
						out.BetIds = make([]string, 0, 4)
					} else {
						out.BetIds = []string{}
					}
				} else {
					out.BetIds = (out.BetIds)[:0]
				}
				for !in.IsDelim(']') {
					var v60 string
					v60 = string(in.String())
					out.BetIds = append(out.BetIds, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi30(out *jwriter.Writer, in ListMarketBookArg) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MarketIds) != 0 {
		const prefix string = ",\"marketIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v61, v62 := range in.MarketIds {
				if v61 > 0 {
					out.RawByte(',')
				}
				out.String(string(v62))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"priceProjection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PriceProjection).MarshalEasyJSON(out)
	}
	if in.OrderProjection != "" {
		const prefix string = ",\"orderProjection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderProjection))
	}
	if in.MatchProjection != "" {
		const prefix string = ",\"matchProjection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MatchProjection))
	}
	if in.IncludeOverallPosition {
		const prefix string = ",\"includeOverallPosition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IncludeOverallPosition))
	}
	if in.PartitionMatchedByStrategyRef {
		const prefix string = ",\"partitionMatchedByStrategyRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PartitionMatchedByStrategyRef))
	}
	if len(in.CustomerStrategyRefs) != 0 {
		const prefix string = ",\"customerStrategyRefs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v63, v64 := range in.CustomerStrategyRefs {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if in.CurrencyCode != "" {
		const prefix string = ",\"currencyCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CurrencyCode))
	}
	if in.Locale != "" {
		const prefix string = ",\"locale\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Locale))
	}
	if true {
		const prefix string = ",\"matchedSince\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.MatchedSince).MarshalJSON())
	}
	if len(in.BetIds) != 0 {
		const prefix string = ",\"betIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.BetIds {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListMarketBookArg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListMarketBookArg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListMarketBookArg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListMarketBookArg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi30(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi31(in *jlexer.Lexer, out *ListClearedOrdersArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betStatus":
			out.BetStatus = string(in.String())
		case "eventTypeIds":
			if in.IsNull() {
				in.Skip()
				out.EventTypeIDs = nil
			} else {
				in.Delim('[')
				if out.EventTypeIDs == nil {
					if !in.IsDelim(']') {
						out.EventTypeIDs = make([]string, 0, 4)
					} else {
						out.EventTypeIDs = []string{}
					}
				} else {
					out.EventTypeIDs = (out.EventTypeIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v67 string
					v67 = string(in.String())
					out.EventTypeIDs = append(out.EventTypeIDs, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventIds":
			if in.IsNull() {
				in.Skip()
				out.EventIDs = nil
			} else {
				in.Delim('[')
				if out.EventIDs == nil {
					if !in.IsDelim(']') {
						out.EventIDs = make([]string, 0, 4)
					} else {
						out.EventIDs = []string{}
					}
				} else {
					out.EventIDs = (out.EventIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v68 string
					v68 = string(in.String())
					out.EventIDs = append(out.EventIDs, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketIds":
			if in.IsNull() {
				in.Skip()
				out.MarketIDs = nil
			} else {
				in.Delim('[')
				if out.MarketIDs == nil {
					if !in.IsDelim(']') {
						out.MarketIDs = make([]string, 0, 4)
					} else {
						out.MarketIDs = []string{}
					}
				} else {
					out.MarketIDs = (out.MarketIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v69 string
					v69 = string(in.String())
					out.MarketIDs = append(out.MarketIDs, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "runnerIds":
			if in.IsNull() {
				in.Skip()
				out.RunnerIDs = nil
			} else {
				in.Delim('[')
				if out.RunnerIDs == nil {
					if !in.IsDelim(']') {
						out.RunnerIDs = make([]int64, 0, 8)
					} else {
						out.RunnerIDs = []int64{}
					}
				} else {
					out.RunnerIDs = (out.RunnerIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v70 int64
					v70 = int64(in.Int64())
					out.RunnerIDs = append(out.RunnerIDs, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "betIds":
			if in.IsNull() {
				in.Skip()
				out.BetIDs = nil
			} else {
				in.Delim('[')
				if out.BetIDs == nil {
					if !in.IsDelim(']') {
						out.BetIDs = make([]string, 0, 4)
					} else {
						out.BetIDs = []string{}
					}
				} else {
					out.BetIDs = (out.BetIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					v71 = string(in.String())
					out.BetIDs = append(out.BetIDs, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerOrderRefs":
			if in.IsNull() {
				in.Skip()
				out.CustomerOrderRefs = nil
			} else {
				in.Delim('[')
				if out.CustomerOrderRefs == nil {
					if !in.IsDelim(']') {
						out.CustomerOrderRefs = make([]string, 0, 4)
					} else {
						out.CustomerOrderRefs = []string{}
					}
				} else {
					out.CustomerOrderRefs = (out.CustomerOrderRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v72 string
					v72 = string(in.String())
					out.CustomerOrderRefs = append(out.CustomerOrderRefs, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerStrategyRefs":
			if in.IsNull() {
				in.Skip()
				out.CustomerStrategyRefs = nil
			} else {
				in.Delim('[')
				if out.CustomerStrategyRefs == nil {
					if !in.IsDelim(']') {
						out.CustomerStrategyRefs = make([]string, 0, 4)
					} else {
						out.CustomerStrategyRefs = []string{}
					}
				} else {
					out.CustomerStrategyRefs = (out.CustomerStrategyRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.CustomerStrategyRefs = append(out.CustomerStrategyRefs, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "side":
			out.Side = string(in.String())
		case "settledDateRange":
			if in.IsNull() {
				in.Skip()
				out.SettledDateRange = nil
			} else {
				if out.SettledDateRange == nil {
					out.SettledDateRange = new(TimeRange)
				}
				(*out.SettledDateRange).UnmarshalEasyJSON(in)
			}
		case "groupBy":
			out.GroupBy = string(in.String())
		case "includeItemDescription":
			out.IncludeItemDescription = bool(in.Bool())
		case "locale":
			out.Locale = string(in.String())
		case "fromRecord":
			out.FromRecord = int(in.Int())
		case "recordCount":
			out.RecordCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi31(out *jwriter.Writer, in ListClearedOrdersArgs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetStatus != "" {
		const prefix string = ",\"betStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetStatus))
	}
	if len(in.EventTypeIDs) != 0 {
		const prefix string = ",\"eventTypeIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.EventTypeIDs {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventIDs) != 0 {
		const prefix string = ",\"eventIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v76, v77 := range in.EventIDs {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.String(string(v77))
			}
			out.RawByte(']')
		}
	}
	if len(in.MarketIDs) != 0 {
		const prefix string = ",\"marketIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v78, v79 := range in.MarketIDs {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.String(string(v79))
			}
			out.RawByte(']')
		}
	}
	if len(in.RunnerIDs) != 0 {
		const prefix string = ",\"runnerIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v80, v81 := range in.RunnerIDs {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v81))
			}
			out.RawByte(']')
		}
	}
	if len(in.BetIDs) != 0 {
		const prefix string = ",\"betIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v82, v83 := range in.BetIDs {
				if v82 > 0 {
					out.RawByte(',')
				}
				out.String(string(v83))
			}
			out.RawByte(']')
		}
	}
	if len(in.CustomerOrderRefs) != 0 {
		const prefix string = ",\"customerOrderRefs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v84, v85 := range in.CustomerOrderRefs {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.String(string(v85))
			}
			out.RawByte(']')
		}
	}
	if len(in.CustomerStrategyRefs) != 0 {
		const prefix string = ",\"customerStrategyRefs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.CustomerStrategyRefs {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.String(string(v87))
			}
			out.RawByte(']')
		}
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.SettledDateRange != nil {
		const prefix string = ",\"settledDateRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SettledDateRange).MarshalEasyJSON(out)
	}
	if in.GroupBy != "" {
		const prefix string = ",\"groupBy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GroupBy))
	}
	if in.IncludeItemDescription {
		const prefix string = ",\"includeItemDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IncludeItemDescription))
	}
	if in.Locale != "" {
		const prefix string = ",\"locale\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Locale))
	}
	if in.FromRecord != 0 {
		const prefix string = ",\"fromRecord\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FromRecord))
	}
	if in.RecordCount != 0 {
		const prefix string = ",\"recordCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RecordCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListClearedOrdersArgs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListClearedOrdersArgs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListClearedOrdersArgs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListClearedOrdersArgs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi31(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi32(in *jlexer.Lexer, out *LimitOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = float64(in.Float64())
		case "price":
			out.Price = float64(in.Float64())
		case "persistenceType":
			out.PersistenceType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi32(out *jwriter.Writer, in LimitOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Size))
	}
	if in.Price != 0 {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Price))
	}
	if in.PersistenceType != "" {
		const prefix string = ",\"persistenceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PersistenceType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi32(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi33(in *jlexer.Lexer, out *LimitOnCloseOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "liability":
			out.Liability = float64(in.Float64())
		case "price":
			out.Price = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi33(out *jwriter.Writer, in LimitOnCloseOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Liability != 0 {
		const prefix string = ",\"liability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Liability))
	}
	if in.Price != 0 {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOnCloseOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOnCloseOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOnCloseOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOnCloseOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi33(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi34(in *jlexer.Lexer, out *ItemDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eventTypeDesc":
			out.EventTypeDesc = string(in.String())
		case "eventDesc":
			out.EventDesc = string(in.String())
		case "marketDesc":
			out.MarketDesc = string(in.String())
		case "marketType":
			out.MarketType = string(in.String())
		case "marketStartTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketStartTime).UnmarshalJSON(data))
			}
		case "runnerDesc":
			out.RunnerDesc = string(in.String())
		case "numberOfWinners":
			out.NumberOfWinners = int(in.Int())
		case "eachWayDivisor":
			out.EachWayDivisor = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi34(out *jwriter.Writer, in ItemDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eventTypeDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventTypeDesc))
	}
	{
		const prefix string = ",\"eventDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventDesc))
	}
	{
		const prefix string = ",\"marketDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketDesc))
	}
	{
		const prefix string = ",\"marketType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketType))
	}
	{
		const prefix string = ",\"marketStartTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.MarketStartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"runnerDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RunnerDesc))
	}
	{
		const prefix string = ",\"numberOfWinners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfWinners))
	}
	{
		const prefix string = ",\"eachWayDivisor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.EachWayDivisor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi34(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi35(in *jlexer.Lexer, out *ExchangePrices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availableToBack":
			if in.IsNull() {
				in.Skip()
				out.AvailableToBack = nil
			} else {
				in.Delim('[')
				if out.AvailableToBack == nil {
					if !in.IsDelim(']') {
						out.AvailableToBack = make([]PriceSize, 0, 4)
					} else {
						out.AvailableToBack = []PriceSize{}
					}
				} else {
					out.AvailableToBack = (out.AvailableToBack)[:0]
				}
				for !in.IsDelim(']') {
					var v88 PriceSize
					(v88).UnmarshalEasyJSON(in)
					out.AvailableToBack = append(out.AvailableToBack, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availableToLay":
			if in.IsNull() {
				in.Skip()
				out.AvailableToLay = nil
			} else {
				in.Delim('[')
				if out.AvailableToLay == nil {
					if !in.IsDelim(']') {
						out.AvailableToLay = make([]PriceSize, 0, 4)
					} else {
						out.AvailableToLay = []PriceSize{}
					}
				} else {
					out.AvailableToLay = (out.AvailableToLay)[:0]
				}
				for !in.IsDelim(']') {
					var v89 PriceSize
					(v89).UnmarshalEasyJSON(in)
					out.AvailableToLay = append(out.AvailableToLay, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradedVolume":
			if in.IsNull() {
				in.Skip()
				out.TradedVolume = nil
			} else {
				in.Delim('[')
				if out.TradedVolume == nil {
					if !in.IsDelim(']') {
						out.TradedVolume = make([]PriceSize, 0, 4)
					} else {
						out.TradedVolume = []PriceSize{}
					}
				} else {
					out.TradedVolume = (out.TradedVolume)[:0]
				}
				for !in.IsDelim(']') {
					var v90 PriceSize
					(v90).UnmarshalEasyJSON(in)
					out.TradedVolume = append(out.TradedVolume, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi35(out *jwriter.Writer, in ExchangePrices) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AvailableToBack) != 0 {
		const prefix string = ",\"availableToBack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v91, v92 := range in.AvailableToBack {
				if v91 > 0 {
					out.RawByte(',')
				}
				(v92).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.AvailableToLay) != 0 {
		const prefix string = ",\"availableToLay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v93, v94 := range in.AvailableToLay {
				if v93 > 0 {
					out.RawByte(',')
				}
				(v94).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.TradedVolume) != 0 {
		const prefix string = ",\"tradedVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v95, v96 := range in.TradedVolume {
				if v95 > 0 {
					out.RawByte(',')
				}
				(v96).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangePrices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangePrices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangePrices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangePrices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi35(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi36(in *jlexer.Lexer, out *ExchangePrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availableToBack":
			if in.IsNull() {
				in.Skip()
				out.AvailableToBack = nil
			} else {
				in.Delim('[')
				if out.AvailableToBack == nil {
					if !in.IsDelim(']') {
						out.AvailableToBack = make([]PriceSize, 0, 4)
					} else {
						out.AvailableToBack = []PriceSize{}
					}
				} else {
					out.AvailableToBack = (out.AvailableToBack)[:0]
				}
				for !in.IsDelim(']') {
					var v97 PriceSize
					(v97).UnmarshalEasyJSON(in)
					out.AvailableToBack = append(out.AvailableToBack, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availableToLay":
			if in.IsNull() {
				in.Skip()
				out.AvailableToLay = nil
			} else {
				in.Delim('[')
				if out.AvailableToLay == nil {
					if !in.IsDelim(']') {
						out.AvailableToLay = make([]PriceSize, 0, 4)
					} else {
						out.AvailableToLay = []PriceSize{}
					}
				} else {
					out.AvailableToLay = (out.AvailableToLay)[:0]
				}
				for !in.IsDelim(']') {
					var v98 PriceSize
					(v98).UnmarshalEasyJSON(in)
					out.AvailableToLay = append(out.AvailableToLay, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradedVolume":
			if in.IsNull() {
				in.Skip()
				out.TradedVolume = nil
			} else {
				in.Delim('[')
				if out.TradedVolume == nil {
					if !in.IsDelim(']') {
						out.TradedVolume = make([]PriceSize, 0, 4)
					} else {
						out.TradedVolume = []PriceSize{}
					}
				} else {
					out.TradedVolume = (out.TradedVolume)[:0]
				}
				for !in.IsDelim(']') {
					var v99 PriceSize
					(v99).UnmarshalEasyJSON(in)
					out.TradedVolume = append(out.TradedVolume, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi36(out *jwriter.Writer, in ExchangePrice) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AvailableToBack) != 0 {
		const prefix string = ",\"availableToBack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v100, v101 := range in.AvailableToBack {
				if v100 > 0 {
					out.RawByte(',')
				}
				(v101).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.AvailableToLay) != 0 {
		const prefix string = ",\"availableToLay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v102, v103 := range in.AvailableToLay {
				if v102 > 0 {
					out.RawByte(',')
				}
				(v103).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.TradedVolume) != 0 {
		const prefix string = ",\"tradedVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.TradedVolume {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangePrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangePrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangePrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangePrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi36(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi37(in *jlexer.Lexer, out *ExBestOffersOverrides) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bestPricesDepth":
			out.BestPricesDepth = int(in.Int())
		case "rollupModel":
			out.RollupModel = string(in.String())
		case "rollupLimit":
			out.RollupLimit = int(in.Int())
		case "rollupLiabilityThreshold":
			out.RollupLiabilityThreshold = float64(in.Float64())
		case "rollupLiabilityFactor":
			out.RollupLiabilityFactor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi37(out *jwriter.Writer, in ExBestOffersOverrides) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BestPricesDepth != 0 {
		const prefix string = ",\"bestPricesDepth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BestPricesDepth))
	}
	if in.RollupModel != "" {
		const prefix string = ",\"rollupModel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RollupModel))
	}
	if in.RollupLimit != 0 {
		const prefix string = ",\"rollupLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RollupLimit))
	}
	if in.RollupLiabilityThreshold != 0 {
		const prefix string = ",\"rollupLiabilityThreshold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.RollupLiabilityThreshold))
	}
	if in.RollupLiabilityFactor != 0 {
		const prefix string = ",\"rollupLiabilityFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RollupLiabilityFactor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExBestOffersOverrides) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExBestOffersOverrides) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExBestOffersOverrides) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExBestOffersOverrides) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi37(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi38(in *jlexer.Lexer, out *EventType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi38(out *jwriter.Writer, in EventType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi38(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi39(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "venue":
			out.Venue = string(in.String())
		case "openDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OpenDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi39(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"countryCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Venue != "" {
		const prefix string = ",\"venue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Venue))
	}
	if true {
		const prefix string = ",\"openDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.OpenDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi39(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi40(in *jlexer.Lexer, out *Competition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi40(out *jwriter.Writer, in Competition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Competition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Competition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Competition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Competition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi40(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi41(in *jlexer.Lexer, out *ClearedOrderSummaryReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clearedOrders":
			if in.IsNull() {
				in.Skip()
				out.ClearedOrders = nil
			} else {
				in.Delim('[')
				if out.ClearedOrders == nil {
					if !in.IsDelim(']') {
						out.ClearedOrders = make([]ClearedOrderSummary, 0, 1)
					} else {
						out.ClearedOrders = []ClearedOrderSummary{}
					}
				} else {
					out.ClearedOrders = (out.ClearedOrders)[:0]
				}
				for !in.IsDelim(']') {
					var v106 ClearedOrderSummary
					(v106).UnmarshalEasyJSON(in)
					out.ClearedOrders = append(out.ClearedOrders, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "moreAvailable":
			out.MoreAvailable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi41(out *jwriter.Writer, in ClearedOrderSummaryReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clearedOrders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ClearedOrders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v107, v108 := range in.ClearedOrders {
				if v107 > 0 {
					out.RawByte(',')
				}
				(v108).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"moreAvailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MoreAvailable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearedOrderSummaryReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearedOrderSummaryReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearedOrderSummaryReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearedOrderSummaryReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi41(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi42(in *jlexer.Lexer, out *ClearedOrderSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eventTypeId":
			out.EventTypeID = string(in.String())
		case "eventId":
			out.EventID = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "selectionId":
			out.SelectionID = int64(in.Int64())
		case "handicap":
			out.Handicap = float64(in.Float64())
		case "betId":
			out.BetID = string(in.String())
		case "placedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PlacedDate).UnmarshalJSON(data))
			}
		case "persistenceType":
			out.PersistenceType = string(in.String())
		case "orderType":
			out.OrderType = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "itemDescription":
			if in.IsNull() {
				in.Skip()
				out.ItemDescription = nil
			} else {
				if out.ItemDescription == nil {
					out.ItemDescription = new(ItemDescription)
				}
				(*out.ItemDescription).UnmarshalEasyJSON(in)
			}
		case "betOutcome":
			out.BetOutcome = string(in.String())
		case "priceRequested":
			out.PriceRequested = float64(in.Float64())
		case "settledDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SettledDate).UnmarshalJSON(data))
			}
		case "lastMatchedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMatchedDate).UnmarshalJSON(data))
			}
		case "betCount":
			out.BetCount = int(in.Int())
		case "commission":
			out.Commission = float64(in.Float64())
		case "priceMatched":
			out.PriceMatched = float64(in.Float64())
		case "priceReduced":
			out.PriceReduced = bool(in.Bool())
		case "sizeSettled":
			out.SizeSettled = float64(in.Float64())
		case "profit":
			out.Profit = float64(in.Float64())
		case "sizeCancelled":
			out.SizeCancelled = float64(in.Float64())
		case "customerOrderRef":
			out.CustomerOrderRef = string(in.String())
		case "customerStrategyRef":
			out.CustomerStrategyRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi42(out *jwriter.Writer, in ClearedOrderSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eventTypeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventTypeID))
	}
	{
		const prefix string = ",\"eventId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventID))
	}
	{
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	{
		const prefix string = ",\"selectionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SelectionID))
	}
	{
		const prefix string = ",\"handicap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Handicap))
	}
	{
		const prefix string = ",\"betId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetID))
	}
	{
		const prefix string = ",\"placedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PlacedDate).MarshalJSON())
	}
	{
		const prefix string = ",\"persistenceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PersistenceType))
	}
	{
		const prefix string = ",\"orderType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"itemDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ItemDescription == nil {
			out.RawString("null")
		} else {
			(*in.ItemDescription).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"betOutcome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetOutcome))
	}
	{
		const prefix string = ",\"priceRequested\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.PriceRequested))
	}
	{
		const prefix string = ",\"settledDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SettledDate).MarshalJSON())
	}
	{
		const prefix string = ",\"lastMatchedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastMatchedDate).MarshalJSON())
	}
	{
		const prefix string = ",\"betCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BetCount))
	}
	{
		const prefix string = ",\"commission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Commission))
	}
	{
		const prefix string = ",\"priceMatched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.PriceMatched))
	}
	{
		const prefix string = ",\"priceReduced\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PriceReduced))
	}
	{
		const prefix string = ",\"sizeSettled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SizeSettled))
	}
	{
		const prefix string = ",\"profit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Profit))
	}
	{
		const prefix string = ",\"sizeCancelled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SizeCancelled))
	}
	{
		const prefix string = ",\"customerOrderRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerOrderRef))
	}
	{
		const prefix string = ",\"customerStrategyRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerStrategyRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearedOrderSummary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearedOrderSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearedOrderSummary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearedOrderSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi42(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi43(in *jlexer.Lexer, out *CancelOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]CancelInstruction, 0, 2)
					} else {
						out.Instructions = []CancelInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v109 CancelInstruction
					(v109).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi43(out *jwriter.Writer, in CancelOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		const prefix string = ",\"instructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v110, v111 := range in.Instructions {
				if v110 > 0 {
					out.RawByte(',')
				}
				(v111).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi43(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi44(in *jlexer.Lexer, out *CancelInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "instruction":
			(out.Instruction).UnmarshalEasyJSON(in)
		case "sizeCancelled":
			out.SizeCancelled = float64(in.Float64())
		case "cancelledDate":
			out.CancelDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi44(out *jwriter.Writer, in CancelInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if true {
		const prefix string = ",\"instruction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Instruction).MarshalEasyJSON(out)
	}
	if in.SizeCancelled != 0 {
		const prefix string = ",\"sizeCancelled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SizeCancelled))
	}
	if in.CancelDate != "" {
		const prefix string = ",\"cancelledDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CancelDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi44(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi45(in *jlexer.Lexer, out *CancelInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betId":
			out.BetID = string(in.String())
		case "sizeReduction":
			out.SizeReduction = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi45(out *jwriter.Writer, in CancelInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetID != "" {
		const prefix string = ",\"betId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BetID))
	}
	if in.SizeReduction != 0 {
		const prefix string = ",\"sizeReduction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SizeReduction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi45(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi46(in *jlexer.Lexer, out *CancelExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]CancelInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []CancelInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v112 CancelInstructionReport
					(v112).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi46(out *jwriter.Writer, in CancelExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		const prefix string = ",\"customerRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerRef))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ErrorCode))
	}
	if in.MarketID != "" {
		const prefix string = ",\"marketId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketID))
	}
	if len(in.InstructionReports) != 0 {
		const prefix string = ",\"instructionReports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.InstructionReports {
				if v113 > 0 {
					out.RawByte(',')
				}
				(v114).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi46(l, v)
}
