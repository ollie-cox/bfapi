// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bfapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8e2f8dd8DecodeGithubComTarbBfapi(in *jlexer.Lexer, out *UpdateOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]UpdateInstruction, 0, 2)
					} else {
						out.Instructions = []UpdateInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UpdateInstruction
					(v1).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi(out *jwriter.Writer, in UpdateOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructions\":")
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Instructions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi1(in *jlexer.Lexer, out *UpdateInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "instruction":
			(out.Instruction).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi1(out *jwriter.Writer, in UpdateInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instruction\":")
		(in.Instruction).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi1(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi2(in *jlexer.Lexer, out *UpdateInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betId":
			out.BetID = string(in.String())
		case "newPersistenceType":
			out.NewPersistenceType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi2(out *jwriter.Writer, in UpdateInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"betId\":")
		out.String(string(in.BetID))
	}
	if in.NewPersistenceType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"newPersistenceType\":")
		out.String(string(in.NewPersistenceType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi2(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi3(in *jlexer.Lexer, out *UpdateExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]UpdateInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []UpdateInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UpdateInstructionReport
					(v4).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi3(out *jwriter.Writer, in UpdateExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.InstructionReports) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructionReports\":")
		if in.InstructionReports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.InstructionReports {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi3(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi4(in *jlexer.Lexer, out *StartingPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "backStakeTaken":
			if in.IsNull() {
				in.Skip()
				out.BackStakeTaken = nil
			} else {
				in.Delim('[')
				if out.BackStakeTaken == nil {
					if !in.IsDelim(']') {
						out.BackStakeTaken = make([]ExchangeBet, 0, 4)
					} else {
						out.BackStakeTaken = []ExchangeBet{}
					}
				} else {
					out.BackStakeTaken = (out.BackStakeTaken)[:0]
				}
				for !in.IsDelim(']') {
					var v7 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v8 := 0
						for !in.IsDelim(']') {
							if v8 < 2 {
								v7[v8] = float64(in.Float64())
								v8++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.BackStakeTaken = append(out.BackStakeTaken, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "layLiabilityTaken":
			if in.IsNull() {
				in.Skip()
				out.LayLiabilityTaken = nil
			} else {
				in.Delim('[')
				if out.LayLiabilityTaken == nil {
					if !in.IsDelim(']') {
						out.LayLiabilityTaken = make([]ExchangeBet, 0, 4)
					} else {
						out.LayLiabilityTaken = []ExchangeBet{}
					}
				} else {
					out.LayLiabilityTaken = (out.LayLiabilityTaken)[:0]
				}
				for !in.IsDelim(']') {
					var v9 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v10 := 0
						for !in.IsDelim(']') {
							if v10 < 2 {
								v9[v10] = float64(in.Float64())
								v10++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.LayLiabilityTaken = append(out.LayLiabilityTaken, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actualSP":
			out.ActualSP = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi4(out *jwriter.Writer, in StartingPrice) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.BackStakeTaken) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"backStakeTaken\":")
		if in.BackStakeTaken == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.BackStakeTaken {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v13 := range v12 {
					if v13 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v12[v13]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	if len(in.LayLiabilityTaken) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"layLiabilityTaken\":")
		if in.LayLiabilityTaken == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.LayLiabilityTaken {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v16 := range v15 {
					if v16 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v15[v16]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	if in.ActualSP != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"actualSP\":")
		out.Float64(float64(in.ActualSP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartingPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartingPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartingPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartingPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi4(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi5(in *jlexer.Lexer, out *RunnerCatalogue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selectionId":
			out.SelectionID = int(in.Int())
		case "runnerName":
			out.RunnerName = string(in.String())
		case "handicap":
			out.Handicap = float64(in.Float64())
		case "sortPriority":
			out.SortPriority = int(in.Int())
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]string)
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 string
					v17 = string(in.String())
					(out.Metadata)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi5(out *jwriter.Writer, in RunnerCatalogue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelectionID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"selectionId\":")
		out.Int(int(in.SelectionID))
	}
	if in.RunnerName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"runnerName\":")
		out.String(string(in.RunnerName))
	}
	if in.Handicap != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"handicap\":")
		out.Float64(float64(in.Handicap))
	}
	if in.SortPriority != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sortPriority\":")
		out.Int(int(in.SortPriority))
	}
	if len(in.Metadata) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metadata\":")
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Metadata {
				if !v18First {
					out.RawByte(',')
				}
				v18First = false
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerCatalogue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerCatalogue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerCatalogue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerCatalogue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi5(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi6(in *jlexer.Lexer, out *ReplaceOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]ReplaceInstruction, 0, 2)
					} else {
						out.Instructions = []ReplaceInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v19 ReplaceInstruction
					(v19).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketVersion":
			(out.MarketVersion).UnmarshalEasyJSON(in)
		case "async":
			out.Async = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi6(out *jwriter.Writer, in ReplaceOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructions\":")
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Instructions {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketVersion\":")
		(in.MarketVersion).MarshalEasyJSON(out)
	}
	if in.Async {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"async\":")
		out.Bool(bool(in.Async))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi6(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi7(in *jlexer.Lexer, out *ReplaceInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "cancelInstructionReport":
			(out.CancelInstructionReport).UnmarshalEasyJSON(in)
		case "placeInstructionReport":
			(out.PlaceInstructionReport).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi7(out *jwriter.Writer, in ReplaceInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cancelInstructionReport\":")
		(in.CancelInstructionReport).MarshalEasyJSON(out)
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"placeInstructionReport\":")
		(in.PlaceInstructionReport).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi7(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi8(in *jlexer.Lexer, out *ReplaceInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betId":
			out.BetID = string(in.String())
		case "newPrice":
			out.NewPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi8(out *jwriter.Writer, in ReplaceInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"betId\":")
		out.String(string(in.BetID))
	}
	if in.NewPrice != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"newPrice\":")
		out.Float64(float64(in.NewPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi8(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi9(in *jlexer.Lexer, out *ReplaceExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]ReplaceInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []ReplaceInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ReplaceInstructionReport
					(v22).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi9(out *jwriter.Writer, in ReplaceExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.InstructionReports) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructionReports\":")
		if in.InstructionReports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.InstructionReports {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplaceExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplaceExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplaceExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplaceExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi9(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi10(in *jlexer.Lexer, out *PriceLadderDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi10(out *jwriter.Writer, in PriceLadderDescription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceLadderDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceLadderDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceLadderDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceLadderDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi10(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi11(in *jlexer.Lexer, out *PlaceOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]PlaceInstruction, 0, 1)
					} else {
						out.Instructions = []PlaceInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 PlaceInstruction
					(v25).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketVersion":
			(out.MarketVersion).UnmarshalEasyJSON(in)
		case "customerStrategyRef":
			out.CustomerStrategyRef = string(in.String())
		case "async":
			out.Async = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi11(out *jwriter.Writer, in PlaceOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructions\":")
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Instructions {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketVersion\":")
		(in.MarketVersion).MarshalEasyJSON(out)
	}
	if in.CustomerStrategyRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerStrategyRef\":")
		out.String(string(in.CustomerStrategyRef))
	}
	if in.Async {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"async\":")
		out.Bool(bool(in.Async))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi11(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi12(in *jlexer.Lexer, out *PlaceOrderArg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]PlaceInstruction, 0, 1)
					} else {
						out.Instructions = []PlaceInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v28 PlaceInstruction
					(v28).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketVersion":
			out.MarketVersion = int(in.Int())
		case "customerStrategyRef":
			out.CustomerStrategyRef = string(in.String())
		case "async":
			out.Async = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi12(out *jwriter.Writer, in PlaceOrderArg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructions\":")
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Instructions {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if in.MarketVersion != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketVersion\":")
		out.Int(int(in.MarketVersion))
	}
	if in.CustomerStrategyRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerStrategyRef\":")
		out.String(string(in.CustomerStrategyRef))
	}
	if in.Async {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"async\":")
		out.Bool(bool(in.Async))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceOrderArg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceOrderArg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceOrderArg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceOrderArg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi12(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi13(in *jlexer.Lexer, out *PlaceInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "orderStatus":
			out.OrderStatus = string(in.String())
		case "instruction":
			(out.Instruction).UnmarshalEasyJSON(in)
		case "betId":
			out.BetID = string(in.String())
		case "placedDate":
			out.PlacedDate = string(in.String())
		case "averagePriceMatched":
			out.AveragePriceMatched = int(in.Int())
		case "sizeMatched":
			out.SizeMatched = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi13(out *jwriter.Writer, in PlaceInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if in.OrderStatus != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"orderStatus\":")
		out.String(string(in.OrderStatus))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instruction\":")
		(in.Instruction).MarshalEasyJSON(out)
	}
	if in.BetID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"betId\":")
		out.String(string(in.BetID))
	}
	if in.PlacedDate != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"placedDate\":")
		out.String(string(in.PlacedDate))
	}
	if in.AveragePriceMatched != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"averagePriceMatched\":")
		out.Int(int(in.AveragePriceMatched))
	}
	if in.SizeMatched != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sizeMatched\":")
		out.Int(int(in.SizeMatched))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi13(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi14(in *jlexer.Lexer, out *PlaceInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderType":
			out.OrderType = string(in.String())
		case "selectionId":
			out.SelectionID = int(in.Int())
		case "handicap":
			out.Handicap = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "limitOrder":
			if in.IsNull() {
				in.Skip()
				out.LimitOrder = nil
			} else {
				if out.LimitOrder == nil {
					out.LimitOrder = new(LimitOrder)
				}
				(*out.LimitOrder).UnmarshalEasyJSON(in)
			}
		case "limitOnCloseOrder":
			if in.IsNull() {
				in.Skip()
				out.LimitOnCloseOrder = nil
			} else {
				if out.LimitOnCloseOrder == nil {
					out.LimitOnCloseOrder = new(LimitOnCloseOrder)
				}
				(*out.LimitOnCloseOrder).UnmarshalEasyJSON(in)
			}
		case "marketOnCloseOrder":
			if in.IsNull() {
				in.Skip()
				out.MarketOnCloseOrder = nil
			} else {
				if out.MarketOnCloseOrder == nil {
					out.MarketOnCloseOrder = new(MarketOnCloseOrder)
				}
				(*out.MarketOnCloseOrder).UnmarshalEasyJSON(in)
			}
		case "customerOrderRef":
			out.CustomerOrderRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi14(out *jwriter.Writer, in PlaceInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OrderType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"orderType\":")
		out.String(string(in.OrderType))
	}
	if in.SelectionID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"selectionId\":")
		out.Int(int(in.SelectionID))
	}
	if in.Handicap != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"handicap\":")
		out.String(string(in.Handicap))
	}
	if in.Side != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"side\":")
		out.String(string(in.Side))
	}
	if in.LimitOrder != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"limitOrder\":")
		if in.LimitOrder == nil {
			out.RawString("null")
		} else {
			(*in.LimitOrder).MarshalEasyJSON(out)
		}
	}
	if in.LimitOnCloseOrder != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"limitOnCloseOrder\":")
		if in.LimitOnCloseOrder == nil {
			out.RawString("null")
		} else {
			(*in.LimitOnCloseOrder).MarshalEasyJSON(out)
		}
	}
	if in.MarketOnCloseOrder != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketOnCloseOrder\":")
		if in.MarketOnCloseOrder == nil {
			out.RawString("null")
		} else {
			(*in.MarketOnCloseOrder).MarshalEasyJSON(out)
		}
	}
	if in.CustomerOrderRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerOrderRef\":")
		out.String(string(in.CustomerOrderRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi14(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi15(in *jlexer.Lexer, out *PlaceExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]PlaceInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []PlaceInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v31 PlaceInstructionReport
					(v31).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi15(out *jwriter.Writer, in PlaceExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if len(in.InstructionReports) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructionReports\":")
		if in.InstructionReports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.InstructionReports {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaceExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaceExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaceExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaceExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi15(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi16(in *jlexer.Lexer, out *MarketVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi16(out *jwriter.Writer, in MarketVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Float64(float64(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi16(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi17(in *jlexer.Lexer, out *MarketOnCloseOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "liability":
			out.Liability = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi17(out *jwriter.Writer, in MarketOnCloseOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Liability != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"liability\":")
		out.Float64(float64(in.Liability))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketOnCloseOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketOnCloseOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketOnCloseOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketOnCloseOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi17(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi18(in *jlexer.Lexer, out *MarketListFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketIds":
			if in.IsNull() {
				in.Skip()
				out.MarketIds = nil
			} else {
				in.Delim('[')
				if out.MarketIds == nil {
					if !in.IsDelim(']') {
						out.MarketIds = make([]string, 0, 4)
					} else {
						out.MarketIds = []string{}
					}
				} else {
					out.MarketIds = (out.MarketIds)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.MarketIds = append(out.MarketIds, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventTypeIds":
			if in.IsNull() {
				in.Skip()
				out.EventTypes = nil
			} else {
				in.Delim('[')
				if out.EventTypes == nil {
					if !in.IsDelim(']') {
						out.EventTypes = make([]string, 0, 4)
					} else {
						out.EventTypes = []string{}
					}
				} else {
					out.EventTypes = (out.EventTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.EventTypes = append(out.EventTypes, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketCountries":
			if in.IsNull() {
				in.Skip()
				out.Countries = nil
			} else {
				in.Delim('[')
				if out.Countries == nil {
					if !in.IsDelim(']') {
						out.Countries = make([]string, 0, 4)
					} else {
						out.Countries = []string{}
					}
				} else {
					out.Countries = (out.Countries)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Countries = append(out.Countries, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketTypeCodes":
			if in.IsNull() {
				in.Skip()
				out.TypeCodes = nil
			} else {
				in.Delim('[')
				if out.TypeCodes == nil {
					if !in.IsDelim(']') {
						out.TypeCodes = make([]string, 0, 4)
					} else {
						out.TypeCodes = []string{}
					}
				} else {
					out.TypeCodes = (out.TypeCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.TypeCodes = append(out.TypeCodes, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi18(out *jwriter.Writer, in MarketListFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MarketIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketIds\":")
		if in.MarketIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.MarketIds {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventTypes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventTypeIds\":")
		if in.EventTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.EventTypes {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	if len(in.Countries) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketCountries\":")
		if in.Countries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Countries {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.TypeCodes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketTypeCodes\":")
		if in.TypeCodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.TypeCodes {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketListFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketListFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketListFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketListFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi18(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi19(in *jlexer.Lexer, out *MarketLineRangeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxUnitValue":
			out.MaxUnitValue = float64(in.Float64())
		case "minUnitValue":
			out.MinUnitValue = float64(in.Float64())
		case "interval":
			out.Interval = float64(in.Float64())
		case "marketUnit":
			out.MarketUnit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi19(out *jwriter.Writer, in MarketLineRangeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxUnitValue != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxUnitValue\":")
		out.Float64(float64(in.MaxUnitValue))
	}
	if in.MinUnitValue != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"minUnitValue\":")
		out.Float64(float64(in.MinUnitValue))
	}
	if in.Interval != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"interval\":")
		out.Float64(float64(in.Interval))
	}
	if in.MarketUnit != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketUnit\":")
		out.String(string(in.MarketUnit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketLineRangeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketLineRangeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketLineRangeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketLineRangeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi19(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi20(in *jlexer.Lexer, out *MarketDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "persistenceEnabled":
			out.PersistenceEnabled = bool(in.Bool())
		case "bspMarket":
			out.BspMarket = bool(in.Bool())
		case "marketTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NarketTime).UnmarshalJSON(data))
			}
		case "suspendTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SuspendTime).UnmarshalJSON(data))
			}
		case "settleTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SettleTime).UnmarshalJSON(data))
			}
		case "bettingType":
			out.BettingType = string(in.String())
		case "turnInPlayEnabled":
			out.TurnInPlayEnabled = bool(in.Bool())
		case "marketType":
			out.MarketType = string(in.String())
		case "regulator":
			out.Regulator = string(in.String())
		case "marketBaseRate":
			out.MarketBaseRate = float64(in.Float64())
		case "discountAllowed":
			out.DiscountAllowed = bool(in.Bool())
		case "wallet":
			out.Wallet = string(in.String())
		case "rules":
			out.Rules = string(in.String())
		case "rulesHasDate":
			out.RulesHasDate = bool(in.Bool())
		case "eachWayDivisor":
			out.EachWayDivisor = float64(in.Float64())
		case "clarifications":
			out.Clarifications = string(in.String())
		case "lineRangeInfo":
			(out.LineRangeInfo).UnmarshalEasyJSON(in)
		case "priceLadderDescription":
			(out.PriceLadderDescription).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi20(out *jwriter.Writer, in MarketDescription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PersistenceEnabled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"persistenceEnabled\":")
		out.Bool(bool(in.PersistenceEnabled))
	}
	if in.BspMarket {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bspMarket\":")
		out.Bool(bool(in.BspMarket))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketTime\":")
		out.Raw((in.NarketTime).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"suspendTime\":")
		out.Raw((in.SuspendTime).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"settleTime\":")
		out.Raw((in.SettleTime).MarshalJSON())
	}
	if in.BettingType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bettingType\":")
		out.String(string(in.BettingType))
	}
	if in.TurnInPlayEnabled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"turnInPlayEnabled\":")
		out.Bool(bool(in.TurnInPlayEnabled))
	}
	if in.MarketType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketType\":")
		out.String(string(in.MarketType))
	}
	if in.Regulator != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regulator\":")
		out.String(string(in.Regulator))
	}
	if in.MarketBaseRate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketBaseRate\":")
		out.Float64(float64(in.MarketBaseRate))
	}
	if in.DiscountAllowed {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"discountAllowed\":")
		out.Bool(bool(in.DiscountAllowed))
	}
	if in.Wallet != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wallet\":")
		out.String(string(in.Wallet))
	}
	if in.Rules != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"rules\":")
		out.String(string(in.Rules))
	}
	if in.RulesHasDate {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"rulesHasDate\":")
		out.Bool(bool(in.RulesHasDate))
	}
	if in.EachWayDivisor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eachWayDivisor\":")
		out.Float64(float64(in.EachWayDivisor))
	}
	if in.Clarifications != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"clarifications\":")
		out.String(string(in.Clarifications))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lineRangeInfo\":")
		(in.LineRangeInfo).MarshalEasyJSON(out)
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"priceLadderDescription\":")
		(in.PriceLadderDescription).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi20(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi21(in *jlexer.Lexer, out *MarketCatalogue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "marketName":
			out.MarketName = string(in.String())
		case "marketStartTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketStartTime).UnmarshalJSON(data))
			}
		case "marketDescription":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(MarketDescription)
				}
				(*out.Description).UnmarshalEasyJSON(in)
			}
		case "totalMatched":
			out.TotalMatched = float64(in.Float64())
		case "runners":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]RunnerCatalogue, 0, 1)
					} else {
						out.Runners = []RunnerCatalogue{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v46 RunnerCatalogue
					(v46).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventType":
			if in.IsNull() {
				in.Skip()
				out.EventType = nil
			} else {
				if out.EventType == nil {
					out.EventType = new(EventType)
				}
				(*out.EventType).UnmarshalEasyJSON(in)
			}
		case "competition":
			if in.IsNull() {
				in.Skip()
				out.Competition = nil
			} else {
				if out.Competition == nil {
					out.Competition = new(Competition)
				}
				(*out.Competition).UnmarshalEasyJSON(in)
			}
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				if out.Event == nil {
					out.Event = new(Event)
				}
				(*out.Event).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi21(out *jwriter.Writer, in MarketCatalogue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if in.MarketName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketName\":")
		out.String(string(in.MarketName))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketStartTime\":")
		out.Raw((in.MarketStartTime).MarshalJSON())
	}
	if in.Description != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketDescription\":")
		if in.Description == nil {
			out.RawString("null")
		} else {
			(*in.Description).MarshalEasyJSON(out)
		}
	}
	if in.TotalMatched != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"totalMatched\":")
		out.Float64(float64(in.TotalMatched))
	}
	if len(in.Runners) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"runners\":")
		if in.Runners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Runners {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.EventType != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventType\":")
		if in.EventType == nil {
			out.RawString("null")
		} else {
			(*in.EventType).MarshalEasyJSON(out)
		}
	}
	if in.Competition != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"competition\":")
		if in.Competition == nil {
			out.RawString("null")
		} else {
			(*in.Competition).MarshalEasyJSON(out)
		}
	}
	if in.Event != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"event\":")
		if in.Event == nil {
			out.RawString("null")
		} else {
			(*in.Event).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCatalogue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCatalogue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCatalogue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCatalogue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi21(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi22(in *jlexer.Lexer, out *ListMarketCatalogueArg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sort":
			out.Sort = string(in.String())
		case "marketProjection":
			if in.IsNull() {
				in.Skip()
				out.MarketProjection = nil
			} else {
				in.Delim('[')
				if out.MarketProjection == nil {
					if !in.IsDelim(']') {
						out.MarketProjection = make([]string, 0, 4)
					} else {
						out.MarketProjection = []string{}
					}
				} else {
					out.MarketProjection = (out.MarketProjection)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.MarketProjection = append(out.MarketProjection, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxResults":
			out.MaxResults = int(in.Int())
		case "filter":
			(out.Filter).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi22(out *jwriter.Writer, in ListMarketCatalogueArg) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Sort != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sort\":")
		out.String(string(in.Sort))
	}
	if len(in.MarketProjection) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketProjection\":")
		if in.MarketProjection == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.MarketProjection {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if in.MaxResults != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxResults\":")
		out.Int(int(in.MaxResults))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"filter\":")
		(in.Filter).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListMarketCatalogueArg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListMarketCatalogueArg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListMarketCatalogueArg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListMarketCatalogueArg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi22(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi23(in *jlexer.Lexer, out *LimitOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = float64(in.Float64())
		case "price":
			out.Price = float64(in.Float64())
		case "persistenceType":
			out.PersistenceType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi23(out *jwriter.Writer, in LimitOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"size\":")
		out.Float64(float64(in.Size))
	}
	if in.Price != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"price\":")
		out.Float64(float64(in.Price))
	}
	if in.PersistenceType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"persistenceType\":")
		out.String(string(in.PersistenceType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi23(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi24(in *jlexer.Lexer, out *LimitOnCloseOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "liability":
			out.Liability = float64(in.Float64())
		case "price":
			out.Price = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi24(out *jwriter.Writer, in LimitOnCloseOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Liability != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"liability\":")
		out.Float64(float64(in.Liability))
	}
	if in.Price != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"price\":")
		out.Float64(float64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitOnCloseOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitOnCloseOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitOnCloseOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitOnCloseOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi24(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi25(in *jlexer.Lexer, out *ExchangePrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availableToBack":
			if in.IsNull() {
				in.Skip()
				out.AvailableToBack = nil
			} else {
				in.Delim('[')
				if out.AvailableToBack == nil {
					if !in.IsDelim(']') {
						out.AvailableToBack = make([]ExchangeBet, 0, 4)
					} else {
						out.AvailableToBack = []ExchangeBet{}
					}
				} else {
					out.AvailableToBack = (out.AvailableToBack)[:0]
				}
				for !in.IsDelim(']') {
					var v52 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v53 := 0
						for !in.IsDelim(']') {
							if v53 < 2 {
								v52[v53] = float64(in.Float64())
								v53++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.AvailableToBack = append(out.AvailableToBack, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "availableToLay":
			if in.IsNull() {
				in.Skip()
				out.AvailableToLay = nil
			} else {
				in.Delim('[')
				if out.AvailableToLay == nil {
					if !in.IsDelim(']') {
						out.AvailableToLay = make([]ExchangeBet, 0, 4)
					} else {
						out.AvailableToLay = []ExchangeBet{}
					}
				} else {
					out.AvailableToLay = (out.AvailableToLay)[:0]
				}
				for !in.IsDelim(']') {
					var v54 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v55 := 0
						for !in.IsDelim(']') {
							if v55 < 2 {
								v54[v55] = float64(in.Float64())
								v55++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.AvailableToLay = append(out.AvailableToLay, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradedVolume":
			if in.IsNull() {
				in.Skip()
				out.TradedVolume = nil
			} else {
				in.Delim('[')
				if out.TradedVolume == nil {
					if !in.IsDelim(']') {
						out.TradedVolume = make([]ExchangeBet, 0, 4)
					} else {
						out.TradedVolume = []ExchangeBet{}
					}
				} else {
					out.TradedVolume = (out.TradedVolume)[:0]
				}
				for !in.IsDelim(']') {
					var v56 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v57 := 0
						for !in.IsDelim(']') {
							if v57 < 2 {
								v56[v57] = float64(in.Float64())
								v57++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.TradedVolume = append(out.TradedVolume, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi25(out *jwriter.Writer, in ExchangePrice) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AvailableToBack) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"availableToBack\":")
		if in.AvailableToBack == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.AvailableToBack {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v60 := range v59 {
					if v60 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v59[v60]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	if len(in.AvailableToLay) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"availableToLay\":")
		if in.AvailableToLay == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.AvailableToLay {
				if v61 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v63 := range v62 {
					if v63 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v62[v63]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	if len(in.TradedVolume) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tradedVolume\":")
		if in.TradedVolume == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v64, v65 := range in.TradedVolume {
				if v64 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v66 := range v65 {
					if v66 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64(v65[v66]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangePrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangePrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangePrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangePrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi25(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi26(in *jlexer.Lexer, out *EventType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi26(out *jwriter.Writer, in EventType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi26(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi27(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "venue":
			out.Venue = string(in.String())
		case "openDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OpenDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi27(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.CountryCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"countryCode\":")
		out.String(string(in.CountryCode))
	}
	if in.Timezone != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timezone\":")
		out.String(string(in.Timezone))
	}
	if in.Venue != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"venue\":")
		out.String(string(in.Venue))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"openDate\":")
		out.Raw((in.OpenDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi27(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi28(in *jlexer.Lexer, out *Competition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi28(out *jwriter.Writer, in Competition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Competition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Competition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Competition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Competition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi28(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi29(in *jlexer.Lexer, out *CancelOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketId":
			out.MarketID = string(in.String())
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]CancelInstruction, 0, 2)
					} else {
						out.Instructions = []CancelInstruction{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v67 CancelInstruction
					(v67).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerRef":
			out.CustomerRef = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi29(out *jwriter.Writer, in CancelOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.Instructions) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructions\":")
		if in.Instructions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Instructions {
				if v68 > 0 {
					out.RawByte(',')
				}
				(v69).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi29(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi30(in *jlexer.Lexer, out *CancelInstructionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "instruction":
			(out.Instruction).UnmarshalEasyJSON(in)
		case "sizeCancelled":
			out.SizeCancelled = float64(in.Float64())
		case "cancelledDate":
			out.CancelDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi30(out *jwriter.Writer, in CancelInstructionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instruction\":")
		(in.Instruction).MarshalEasyJSON(out)
	}
	if in.SizeCancelled != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sizeCancelled\":")
		out.Float64(float64(in.SizeCancelled))
	}
	if in.CancelDate != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cancelledDate\":")
		out.String(string(in.CancelDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelInstructionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelInstructionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelInstructionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelInstructionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi30(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi31(in *jlexer.Lexer, out *CancelInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "betId":
			out.BetID = string(in.String())
		case "sizeReduction":
			out.SizeReduction = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi31(out *jwriter.Writer, in CancelInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BetID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"betId\":")
		out.String(string(in.BetID))
	}
	if in.SizeReduction != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sizeReduction\":")
		out.Float64(float64(in.SizeReduction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelInstruction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelInstruction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi31(l, v)
}
func easyjson8e2f8dd8DecodeGithubComTarbBfapi32(in *jlexer.Lexer, out *CancelExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "customerRef":
			out.CustomerRef = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "marketId":
			out.MarketID = string(in.String())
		case "instructionReports":
			if in.IsNull() {
				in.Skip()
				out.InstructionReports = nil
			} else {
				in.Delim('[')
				if out.InstructionReports == nil {
					if !in.IsDelim(']') {
						out.InstructionReports = make([]CancelInstructionReport, 0, 1)
					} else {
						out.InstructionReports = []CancelInstructionReport{}
					}
				} else {
					out.InstructionReports = (out.InstructionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v70 CancelInstructionReport
					(v70).UnmarshalEasyJSON(in)
					out.InstructionReports = append(out.InstructionReports, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e2f8dd8EncodeGithubComTarbBfapi32(out *jwriter.Writer, in CancelExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomerRef != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerRef\":")
		out.String(string(in.CustomerRef))
	}
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if in.MarketID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketId\":")
		out.String(string(in.MarketID))
	}
	if len(in.InstructionReports) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instructionReports\":")
		if in.InstructionReports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.InstructionReports {
				if v71 > 0 {
					out.RawByte(',')
				}
				(v72).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelExecutionReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e2f8dd8EncodeGithubComTarbBfapi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e2f8dd8EncodeGithubComTarbBfapi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelExecutionReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e2f8dd8DecodeGithubComTarbBfapi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e2f8dd8DecodeGithubComTarbBfapi32(l, v)
}
