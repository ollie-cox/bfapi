// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bfapi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson54c0b74dDecodeGithubComTarbBfapi(in *jlexer.Lexer, out *UnmatchedOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "rfc":
			out.Ref = string(in.String())
		case "p":
			out.Price = float64(in.Float64())
		case "s":
			out.Size = float64(in.Float64())
		case "side":
			out.Side = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "pt":
			out.PerType = string(in.String())
		case "ot":
			out.OrderType = string(in.String())
		case "pd":
			out.PlacedAt = int64(in.Int64())
		case "md":
			out.MatchedAt = int64(in.Int64())
		case "ld":
			out.LapsedAt = int64(in.Int64())
		case "avp":
			out.AvgPrice = float64(in.Float64())
		case "sm":
			out.SizeMatched = float64(in.Float64())
		case "sr":
			out.SizeRemaing = float64(in.Float64())
		case "sl":
			out.SizeLapse = float64(in.Float64())
		case "sc":
			out.SizeCanceled = float64(in.Float64())
		case "sv":
			out.SizeVoided = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi(out *jwriter.Writer, in UnmatchedOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rfc\":")
	out.String(string(in.Ref))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"p\":")
	out.Float64(float64(in.Price))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"s\":")
	out.Float64(float64(in.Size))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"side\":")
	out.String(string(in.Side))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pt\":")
	out.String(string(in.PerType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ot\":")
	out.String(string(in.OrderType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pd\":")
	out.Int64(int64(in.PlacedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"md\":")
	out.Int64(int64(in.MatchedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ld\":")
	out.Int64(int64(in.LapsedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avp\":")
	out.Float64(float64(in.AvgPrice))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sm\":")
	out.Float64(float64(in.SizeMatched))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sr\":")
	out.Float64(float64(in.SizeRemaing))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sl\":")
	out.Float64(float64(in.SizeLapse))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sc\":")
	out.Float64(float64(in.SizeCanceled))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sv\":")
	out.Float64(float64(in.SizeVoided))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnmatchedOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnmatchedOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnmatchedOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnmatchedOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi1(in *jlexer.Lexer, out *SubsMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int32(in.Int32())
		case "segmentationEnabled":
			out.SegmentationEnabled = bool(in.Bool())
		case "clk":
			out.Clk = string(in.String())
		case "heartbeatMs":
			out.HeartbeatMs = int64(in.Int64())
		case "initialClk":
			out.InitialClk = string(in.String())
		case "conflateMs":
			out.ConflateMs = int64(in.Int64())
		case "marketFilter":
			if in.IsNull() {
				in.Skip()
				out.MarketFilter = nil
			} else {
				if out.MarketFilter == nil {
					out.MarketFilter = new(MarketStreamFilter)
				}
				(*out.MarketFilter).UnmarshalEasyJSON(in)
			}
		case "marketDataFilter":
			if in.IsNull() {
				in.Skip()
				out.MarketDataFilter = nil
			} else {
				if out.MarketDataFilter == nil {
					out.MarketDataFilter = new(MarketDataFilter)
				}
				(*out.MarketDataFilter).UnmarshalEasyJSON(in)
			}
		case "orderFilter":
			if in.IsNull() {
				in.Skip()
				out.OrderFilter = nil
			} else {
				if out.OrderFilter == nil {
					out.OrderFilter = new(OrderFilter)
				}
				(*out.OrderFilter).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi1(out *jwriter.Writer, in SubsMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"op\":")
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int32(int32(in.ID))
	}
	if in.SegmentationEnabled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"segmentationEnabled\":")
		out.Bool(bool(in.SegmentationEnabled))
	}
	if in.Clk != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"clk\":")
		out.String(string(in.Clk))
	}
	if in.HeartbeatMs != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"heartbeatMs\":")
		out.Int64(int64(in.HeartbeatMs))
	}
	if in.InitialClk != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"initialClk\":")
		out.String(string(in.InitialClk))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"conflateMs\":")
	out.Int64(int64(in.ConflateMs))
	if in.MarketFilter != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketFilter\":")
		if in.MarketFilter == nil {
			out.RawString("null")
		} else {
			(*in.MarketFilter).MarshalEasyJSON(out)
		}
	}
	if in.MarketDataFilter != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketDataFilter\":")
		if in.MarketDataFilter == nil {
			out.RawString("null")
		} else {
			(*in.MarketDataFilter).MarshalEasyJSON(out)
		}
	}
	if in.OrderFilter != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"orderFilter\":")
		if in.OrderFilter == nil {
			out.RawString("null")
		} else {
			(*in.OrderFilter).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubsMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubsMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubsMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubsMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi1(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi2(in *jlexer.Lexer, out *StatusMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "connectionId":
			out.ConnectionID = string(in.String())
		case "connectionClosed":
			out.ConnectionClosed = bool(in.Bool())
		case "statusCode":
			out.StatusCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi2(out *jwriter.Writer, in StatusMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"op\":")
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.ID))
	}
	if in.ErrorMessage != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorMessage\":")
		out.String(string(in.ErrorMessage))
	}
	if in.ErrorCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"errorCode\":")
		out.String(string(in.ErrorCode))
	}
	if in.ConnectionID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectionId\":")
		out.String(string(in.ConnectionID))
	}
	if in.ConnectionClosed {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectionClosed\":")
		out.Bool(bool(in.ConnectionClosed))
	}
	if in.StatusCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"statusCode\":")
		out.String(string(in.StatusCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi2(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi3(in *jlexer.Lexer, out *RunnerOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullImage":
			out.Image = bool(in.Bool())
		case "id":
			out.SelectionID = int(in.Int())
		case "uo":
			if in.IsNull() {
				in.Skip()
				out.Unmatched = nil
			} else {
				in.Delim('[')
				if out.Unmatched == nil {
					if !in.IsDelim(']') {
						out.Unmatched = make([]UnmatchedOrder, 0, 1)
					} else {
						out.Unmatched = []UnmatchedOrder{}
					}
				} else {
					out.Unmatched = (out.Unmatched)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UnmatchedOrder
					(v1).UnmarshalEasyJSON(in)
					out.Unmatched = append(out.Unmatched, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mb":
			if in.IsNull() {
				in.Skip()
				out.MatchedBacks = nil
			} else {
				in.Delim('[')
				if out.MatchedBacks == nil {
					if !in.IsDelim(']') {
						out.MatchedBacks = make([]ExchangeBet, 0, 4)
					} else {
						out.MatchedBacks = []ExchangeBet{}
					}
				} else {
					out.MatchedBacks = (out.MatchedBacks)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v3 := 0
						for !in.IsDelim(']') {
							if v3 < 2 {
								v2[v3] = float64(in.Float64())
								v3++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.MatchedBacks = append(out.MatchedBacks, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ml":
			if in.IsNull() {
				in.Skip()
				out.MatchedLays = nil
			} else {
				in.Delim('[')
				if out.MatchedLays == nil {
					if !in.IsDelim(']') {
						out.MatchedLays = make([]ExchangeBet, 0, 4)
					} else {
						out.MatchedLays = []ExchangeBet{}
					}
				} else {
					out.MatchedLays = (out.MatchedLays)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v5 := 0
						for !in.IsDelim(']') {
							if v5 < 2 {
								v4[v5] = float64(in.Float64())
								v5++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.MatchedLays = append(out.MatchedLays, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi3(out *jwriter.Writer, in RunnerOrder) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fullImage\":")
	out.Bool(bool(in.Image))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int(int(in.SelectionID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uo\":")
	if in.Unmatched == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Unmatched {
			if v6 > 0 {
				out.RawByte(',')
			}
			(v7).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mb\":")
	if in.MatchedBacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.MatchedBacks {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v10 := range v9 {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v9[v10]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ml\":")
	if in.MatchedLays == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in.MatchedLays {
			if v11 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v13 := range v12 {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v12[v13]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi3(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi4(in *jlexer.Lexer, out *RunnerDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "sortPriority":
			out.SortPriority = int(in.Int())
		case "bsp":
			out.Sp = float64(in.Float64())
		case "id":
			out.SelectionID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi4(out *jwriter.Writer, in RunnerDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.SortPriority != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sortPriority\":")
		out.Int(int(in.SortPriority))
	}
	if in.Sp != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bsp\":")
		out.Float64(float64(in.Sp))
	}
	if in.SelectionID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.SelectionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi4(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi5(in *jlexer.Lexer, out *RunnerChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "spn":
			out.Spn = float64(in.Float64())
		case "ltp":
			out.Ltp = float64(in.Float64())
		case "tv":
			out.Tv = float64(in.Float64())
		case "bdatb":
			if in.IsNull() {
				in.Skip()
				out.Bdatb = nil
			} else {
				in.Delim('[')
				if out.Bdatb == nil {
					if !in.IsDelim(']') {
						out.Bdatb = make([]ExchangeBet, 0, 4)
					} else {
						out.Bdatb = []ExchangeBet{}
					}
				} else {
					out.Bdatb = (out.Bdatb)[:0]
				}
				for !in.IsDelim(']') {
					var v14 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v15 := 0
						for !in.IsDelim(']') {
							if v15 < 2 {
								v14[v15] = float64(in.Float64())
								v15++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bdatb = append(out.Bdatb, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bdatl":
			if in.IsNull() {
				in.Skip()
				out.Bdatl = nil
			} else {
				in.Delim('[')
				if out.Bdatl == nil {
					if !in.IsDelim(']') {
						out.Bdatl = make([]ExchangeBet, 0, 4)
					} else {
						out.Bdatl = []ExchangeBet{}
					}
				} else {
					out.Bdatl = (out.Bdatl)[:0]
				}
				for !in.IsDelim(']') {
					var v16 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v17 := 0
						for !in.IsDelim(']') {
							if v17 < 2 {
								v16[v17] = float64(in.Float64())
								v17++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bdatl = append(out.Bdatl, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "atb":
			if in.IsNull() {
				in.Skip()
				out.Atb = nil
			} else {
				in.Delim('[')
				if out.Atb == nil {
					if !in.IsDelim(']') {
						out.Atb = make([]ExchangeBet, 0, 4)
					} else {
						out.Atb = []ExchangeBet{}
					}
				} else {
					out.Atb = (out.Atb)[:0]
				}
				for !in.IsDelim(']') {
					var v18 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v19 := 0
						for !in.IsDelim(']') {
							if v19 < 2 {
								v18[v19] = float64(in.Float64())
								v19++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Atb = append(out.Atb, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "atl":
			if in.IsNull() {
				in.Skip()
				out.Atl = nil
			} else {
				in.Delim('[')
				if out.Atl == nil {
					if !in.IsDelim(']') {
						out.Atl = make([]ExchangeBet, 0, 4)
					} else {
						out.Atl = []ExchangeBet{}
					}
				} else {
					out.Atl = (out.Atl)[:0]
				}
				for !in.IsDelim(']') {
					var v20 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v21 := 0
						for !in.IsDelim(']') {
							if v21 < 2 {
								v20[v21] = float64(in.Float64())
								v21++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Atl = append(out.Atl, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "batb":
			if in.IsNull() {
				in.Skip()
				out.Batb = nil
			} else {
				in.Delim('[')
				if out.Batb == nil {
					if !in.IsDelim(']') {
						out.Batb = make([]ExchangeBet, 0, 4)
					} else {
						out.Batb = []ExchangeBet{}
					}
				} else {
					out.Batb = (out.Batb)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v23 := 0
						for !in.IsDelim(']') {
							if v23 < 2 {
								v22[v23] = float64(in.Float64())
								v23++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Batb = append(out.Batb, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "batl":
			if in.IsNull() {
				in.Skip()
				out.Batl = nil
			} else {
				in.Delim('[')
				if out.Batl == nil {
					if !in.IsDelim(']') {
						out.Batl = make([]ExchangeBet, 0, 4)
					} else {
						out.Batl = []ExchangeBet{}
					}
				} else {
					out.Batl = (out.Batl)[:0]
				}
				for !in.IsDelim(']') {
					var v24 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v25 := 0
						for !in.IsDelim(']') {
							if v25 < 2 {
								v24[v25] = float64(in.Float64())
								v25++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Batl = append(out.Batl, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trd":
			if in.IsNull() {
				in.Skip()
				out.Trd = nil
			} else {
				in.Delim('[')
				if out.Trd == nil {
					if !in.IsDelim(']') {
						out.Trd = make([]ExchangeBet, 0, 4)
					} else {
						out.Trd = []ExchangeBet{}
					}
				} else {
					out.Trd = (out.Trd)[:0]
				}
				for !in.IsDelim(']') {
					var v26 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v27 := 0
						for !in.IsDelim(']') {
							if v27 < 2 {
								v26[v27] = float64(in.Float64())
								v27++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Trd = append(out.Trd, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "spb":
			if in.IsNull() {
				in.Skip()
				out.Spb = nil
			} else {
				in.Delim('[')
				if out.Spb == nil {
					if !in.IsDelim(']') {
						out.Spb = make([]ExchangeBet, 0, 4)
					} else {
						out.Spb = []ExchangeBet{}
					}
				} else {
					out.Spb = (out.Spb)[:0]
				}
				for !in.IsDelim(']') {
					var v28 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v29 := 0
						for !in.IsDelim(']') {
							if v29 < 2 {
								v28[v29] = float64(in.Float64())
								v29++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Spb = append(out.Spb, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "spl":
			if in.IsNull() {
				in.Skip()
				out.Spl = nil
			} else {
				in.Delim('[')
				if out.Spl == nil {
					if !in.IsDelim(']') {
						out.Spl = make([]ExchangeBet, 0, 4)
					} else {
						out.Spl = []ExchangeBet{}
					}
				} else {
					out.Spl = (out.Spl)[:0]
				}
				for !in.IsDelim(']') {
					var v30 ExchangeBet
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v31 := 0
						for !in.IsDelim(']') {
							if v31 < 2 {
								v30[v31] = float64(in.Float64())
								v31++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Spl = append(out.Spl, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi5(out *jwriter.Writer, in RunnerChange) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int(int(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"spn\":")
	out.Float64(float64(in.Spn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ltp\":")
	out.Float64(float64(in.Ltp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tv\":")
	out.Float64(float64(in.Tv))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bdatb\":")
	if in.Bdatb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in.Bdatb {
			if v32 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v34 := range v33 {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v33[v34]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bdatl\":")
	if in.Bdatl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in.Bdatl {
			if v35 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v37 := range v36 {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v36[v37]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"atb\":")
	if in.Atb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v38, v39 := range in.Atb {
			if v38 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v40 := range v39 {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v39[v40]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"atl\":")
	if in.Atl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v41, v42 := range in.Atl {
			if v41 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v43 := range v42 {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v42[v43]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"batb\":")
	if in.Batb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v44, v45 := range in.Batb {
			if v44 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v46 := range v45 {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v45[v46]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"batl\":")
	if in.Batl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v47, v48 := range in.Batl {
			if v47 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v49 := range v48 {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v48[v49]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"trd\":")
	if in.Trd == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v50, v51 := range in.Trd {
			if v50 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v52 := range v51 {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v51[v52]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"spb\":")
	if in.Spb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v53, v54 := range in.Spb {
			if v53 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v55 := range v54 {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v54[v55]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"spl\":")
	if in.Spl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v56, v57 := range in.Spl {
			if v56 > 0 {
				out.RawByte(',')
			}
			out.RawByte('[')
			for v58 := range v57 {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v57[v58]))
			}
			out.RawByte(']')
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi5(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi6(in *jlexer.Lexer, out *OrderFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "includeOverallPosition":
			out.IncludeOverallPosition = bool(in.Bool())
		case "accountIds":
			if in.IsNull() {
				in.Skip()
				out.AccountIds = nil
			} else {
				in.Delim('[')
				if out.AccountIds == nil {
					if !in.IsDelim(']') {
						out.AccountIds = make([]int64, 0, 8)
					} else {
						out.AccountIds = []int64{}
					}
				} else {
					out.AccountIds = (out.AccountIds)[:0]
				}
				for !in.IsDelim(']') {
					var v59 int64
					v59 = int64(in.Int64())
					out.AccountIds = append(out.AccountIds, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerStrategyRefs":
			if in.IsNull() {
				in.Skip()
				out.CustomerStrategyRefs = nil
			} else {
				in.Delim('[')
				if out.CustomerStrategyRefs == nil {
					if !in.IsDelim(']') {
						out.CustomerStrategyRefs = make([]string, 0, 4)
					} else {
						out.CustomerStrategyRefs = []string{}
					}
				} else {
					out.CustomerStrategyRefs = (out.CustomerStrategyRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v60 string
					v60 = string(in.String())
					out.CustomerStrategyRefs = append(out.CustomerStrategyRefs, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "partitionMatchedByStrategyRef":
			out.PartitionMatchedByStrategyRef = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi6(out *jwriter.Writer, in OrderFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IncludeOverallPosition {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"includeOverallPosition\":")
		out.Bool(bool(in.IncludeOverallPosition))
	}
	if len(in.AccountIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"accountIds\":")
		if in.AccountIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.AccountIds {
				if v61 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v62))
			}
			out.RawByte(']')
		}
	}
	if len(in.CustomerStrategyRefs) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customerStrategyRefs\":")
		if in.CustomerStrategyRefs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v63, v64 := range in.CustomerStrategyRefs {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if in.PartitionMatchedByStrategyRef {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"partitionMatchedByStrategyRef\":")
		out.Bool(bool(in.PartitionMatchedByStrategyRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi6(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi7(in *jlexer.Lexer, out *OrderChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.MarketID = string(in.String())
		case "orc":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]RunnerOrder, 0, 1)
					} else {
						out.Runners = []RunnerOrder{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v65 RunnerOrder
					(v65).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi7(out *jwriter.Writer, in OrderChange) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.MarketID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"orc\":")
	if in.Runners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v66, v67 := range in.Runners {
			if v66 > 0 {
				out.RawByte(',')
			}
			(v67).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi7(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi8(in *jlexer.Lexer, out *MarketStreamFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketIds":
			if in.IsNull() {
				in.Skip()
				out.MarketIds = nil
			} else {
				in.Delim('[')
				if out.MarketIds == nil {
					if !in.IsDelim(']') {
						out.MarketIds = make([]string, 0, 4)
					} else {
						out.MarketIds = []string{}
					}
				} else {
					out.MarketIds = (out.MarketIds)[:0]
				}
				for !in.IsDelim(']') {
					var v68 string
					v68 = string(in.String())
					out.MarketIds = append(out.MarketIds, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "countryCodes":
			if in.IsNull() {
				in.Skip()
				out.CountryCodes = nil
			} else {
				in.Delim('[')
				if out.CountryCodes == nil {
					if !in.IsDelim(']') {
						out.CountryCodes = make([]string, 0, 4)
					} else {
						out.CountryCodes = []string{}
					}
				} else {
					out.CountryCodes = (out.CountryCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v69 string
					v69 = string(in.String())
					out.CountryCodes = append(out.CountryCodes, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bettingTypes":
			if in.IsNull() {
				in.Skip()
				out.BettingTypes = nil
			} else {
				in.Delim('[')
				if out.BettingTypes == nil {
					if !in.IsDelim(']') {
						out.BettingTypes = make([]string, 0, 4)
					} else {
						out.BettingTypes = []string{}
					}
				} else {
					out.BettingTypes = (out.BettingTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.BettingTypes = append(out.BettingTypes, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "turnInPlayEnabled":
			out.TurnInPlayEnabled = bool(in.Bool())
		case "marketTypes":
			if in.IsNull() {
				in.Skip()
				out.MarketTypes = nil
			} else {
				in.Delim('[')
				if out.MarketTypes == nil {
					if !in.IsDelim(']') {
						out.MarketTypes = make([]string, 0, 4)
					} else {
						out.MarketTypes = []string{}
					}
				} else {
					out.MarketTypes = (out.MarketTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					v71 = string(in.String())
					out.MarketTypes = append(out.MarketTypes, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "venues":
			if in.IsNull() {
				in.Skip()
				out.Venues = nil
			} else {
				in.Delim('[')
				if out.Venues == nil {
					if !in.IsDelim(']') {
						out.Venues = make([]string, 0, 4)
					} else {
						out.Venues = []string{}
					}
				} else {
					out.Venues = (out.Venues)[:0]
				}
				for !in.IsDelim(']') {
					var v72 string
					v72 = string(in.String())
					out.Venues = append(out.Venues, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventTypeIds":
			if in.IsNull() {
				in.Skip()
				out.EventTypeIds = nil
			} else {
				in.Delim('[')
				if out.EventTypeIds == nil {
					if !in.IsDelim(']') {
						out.EventTypeIds = make([]string, 0, 4)
					} else {
						out.EventTypeIds = []string{}
					}
				} else {
					out.EventTypeIds = (out.EventTypeIds)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.EventTypeIds = append(out.EventTypeIds, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventIds":
			if in.IsNull() {
				in.Skip()
				out.EventIds = nil
			} else {
				in.Delim('[')
				if out.EventIds == nil {
					if !in.IsDelim(']') {
						out.EventIds = make([]string, 0, 4)
					} else {
						out.EventIds = []string{}
					}
				} else {
					out.EventIds = (out.EventIds)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.EventIds = append(out.EventIds, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bspMarket":
			out.BspMarket = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi8(out *jwriter.Writer, in MarketStreamFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MarketIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketIds\":")
		if in.MarketIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.MarketIds {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	if len(in.CountryCodes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"countryCodes\":")
		if in.CountryCodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.CountryCodes {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.String(string(v78))
			}
			out.RawByte(']')
		}
	}
	if len(in.BettingTypes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bettingTypes\":")
		if in.BettingTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v79, v80 := range in.BettingTypes {
				if v79 > 0 {
					out.RawByte(',')
				}
				out.String(string(v80))
			}
			out.RawByte(']')
		}
	}
	if in.TurnInPlayEnabled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"turnInPlayEnabled\":")
		out.Bool(bool(in.TurnInPlayEnabled))
	}
	if len(in.MarketTypes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketTypes\":")
		if in.MarketTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.MarketTypes {
				if v81 > 0 {
					out.RawByte(',')
				}
				out.String(string(v82))
			}
			out.RawByte(']')
		}
	}
	if len(in.Venues) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"venues\":")
		if in.Venues == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Venues {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.String(string(v84))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventTypeIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventTypeIds\":")
		if in.EventTypeIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v85, v86 := range in.EventTypeIds {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.String(string(v86))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventIds) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventIds\":")
		if in.EventIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.EventIds {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	if in.BspMarket {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bspMarket\":")
		out.Bool(bool(in.BspMarket))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketStreamFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketStreamFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketStreamFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketStreamFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi8(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi9(in *jlexer.Lexer, out *MarketDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "venue":
			out.Venue = string(in.String())
		case "settledTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SettledTime).UnmarshalJSON(data))
			}
		case "timezone":
			out.Timezone = string(in.String())
		case "eachWayDivisor":
			out.EachWayDivisor = float64(in.Float64())
		case "regulators":
			if in.IsNull() {
				in.Skip()
				out.Regulators = nil
			} else {
				in.Delim('[')
				if out.Regulators == nil {
					if !in.IsDelim(']') {
						out.Regulators = make([]string, 0, 4)
					} else {
						out.Regulators = []string{}
					}
				} else {
					out.Regulators = (out.Regulators)[:0]
				}
				for !in.IsDelim(']') {
					var v89 string
					v89 = string(in.String())
					out.Regulators = append(out.Regulators, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketType":
			out.MarketType = string(in.String())
		case "marketBaseRate":
			out.MarketBaseRate = float64(in.Float64())
		case "numberOfWinners":
			out.NumberOfWinners = int32(in.Int32())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "inPlay":
			out.InPlay = bool(in.Bool())
		case "betDelay":
			out.BetDelay = int32(in.Int32())
		case "bspMarket":
			out.BspMarket = bool(in.Bool())
		case "bettingType":
			out.BettingType = string(in.String())
		case "numberOfActiveRunners":
			out.NumberOfActiveRunners = int32(in.Int32())
		case "eventId":
			out.EventID = string(in.String())
		case "crossMatching":
			out.CrossMatching = bool(in.Bool())
		case "runnersVoidable":
			out.RunnersVoidable = bool(in.Bool())
		case "turnInPlayEnabled":
			out.TurnInPlayEnabled = bool(in.Bool())
		case "suspendTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SuspendTime).UnmarshalJSON(data))
			}
		case "discountAllowed":
			out.DiscountAllowed = bool(in.Bool())
		case "persistenceEnabled":
			out.PersistenceEnabled = bool(in.Bool())
		case "runners":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]RunnerDefinition, 0, 1)
					} else {
						out.Runners = []RunnerDefinition{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v90 RunnerDefinition
					(v90).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = int64(in.Int64())
		case "eventTypeId":
			out.EventTypeID = string(in.String())
		case "complete":
			out.Complete = bool(in.Bool())
		case "openDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OpenDate).UnmarshalJSON(data))
			}
		case "marketTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketTime).UnmarshalJSON(data))
			}
		case "bspReconciled":
			out.BspReconciled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi9(out *jwriter.Writer, in MarketDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"status\":")
		out.String(string(in.Status))
	}
	if in.Venue != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"venue\":")
		out.String(string(in.Venue))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"settledTime\":")
		out.Raw((in.SettledTime).MarshalJSON())
	}
	if in.Timezone != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timezone\":")
		out.String(string(in.Timezone))
	}
	if in.EachWayDivisor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eachWayDivisor\":")
		out.Float64(float64(in.EachWayDivisor))
	}
	if len(in.Regulators) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regulators\":")
		if in.Regulators == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.Regulators {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.String(string(v92))
			}
			out.RawByte(']')
		}
	}
	if in.MarketType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketType\":")
		out.String(string(in.MarketType))
	}
	if in.MarketBaseRate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketBaseRate\":")
		out.Float64(float64(in.MarketBaseRate))
	}
	if in.NumberOfWinners != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"numberOfWinners\":")
		out.Int32(int32(in.NumberOfWinners))
	}
	if in.CountryCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"countryCode\":")
		out.String(string(in.CountryCode))
	}
	if in.InPlay {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inPlay\":")
		out.Bool(bool(in.InPlay))
	}
	if in.BetDelay != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"betDelay\":")
		out.Int32(int32(in.BetDelay))
	}
	if in.BspMarket {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bspMarket\":")
		out.Bool(bool(in.BspMarket))
	}
	if in.BettingType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bettingType\":")
		out.String(string(in.BettingType))
	}
	if in.NumberOfActiveRunners != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"numberOfActiveRunners\":")
		out.Int32(int32(in.NumberOfActiveRunners))
	}
	if in.EventID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventId\":")
		out.String(string(in.EventID))
	}
	if in.CrossMatching {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"crossMatching\":")
		out.Bool(bool(in.CrossMatching))
	}
	if in.RunnersVoidable {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"runnersVoidable\":")
		out.Bool(bool(in.RunnersVoidable))
	}
	if in.TurnInPlayEnabled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"turnInPlayEnabled\":")
		out.Bool(bool(in.TurnInPlayEnabled))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"suspendTime\":")
		out.Raw((in.SuspendTime).MarshalJSON())
	}
	if in.DiscountAllowed {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"discountAllowed\":")
		out.Bool(bool(in.DiscountAllowed))
	}
	if in.PersistenceEnabled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"persistenceEnabled\":")
		out.Bool(bool(in.PersistenceEnabled))
	}
	if len(in.Runners) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"runners\":")
		if in.Runners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.Runners {
				if v93 > 0 {
					out.RawByte(',')
				}
				(v94).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Version != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"version\":")
		out.Int64(int64(in.Version))
	}
	if in.EventTypeID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"eventTypeId\":")
		out.String(string(in.EventTypeID))
	}
	if in.Complete {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"complete\":")
		out.Bool(bool(in.Complete))
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"openDate\":")
		out.Raw((in.OpenDate).MarshalJSON())
	}
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"marketTime\":")
		out.Raw((in.MarketTime).MarshalJSON())
	}
	if in.BspReconciled {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bspReconciled\":")
		out.Bool(bool(in.BspReconciled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi9(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi10(in *jlexer.Lexer, out *MarketDataFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ladderLevels":
			out.LadderLevels = int32(in.Int32())
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v95 string
					v95 = string(in.String())
					out.Fields = append(out.Fields, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi10(out *jwriter.Writer, in MarketDataFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LadderLevels != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ladderLevels\":")
		out.Int32(int32(in.LadderLevels))
	}
	if len(in.Fields) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"fields\":")
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.Fields {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.String(string(v97))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi10(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi11(in *jlexer.Lexer, out *MarketChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "rc":
			if in.IsNull() {
				in.Skip()
				out.Rc = nil
			} else {
				in.Delim('[')
				if out.Rc == nil {
					if !in.IsDelim(']') {
						out.Rc = make([]RunnerChange, 0, 1)
					} else {
						out.Rc = []RunnerChange{}
					}
				} else {
					out.Rc = (out.Rc)[:0]
				}
				for !in.IsDelim(']') {
					var v98 RunnerChange
					(v98).UnmarshalEasyJSON(in)
					out.Rc = append(out.Rc, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketDefinition":
			if in.IsNull() {
				in.Skip()
				out.MarketDefinition = nil
			} else {
				if out.MarketDefinition == nil {
					out.MarketDefinition = new(MarketDefinition)
				}
				(*out.MarketDefinition).UnmarshalEasyJSON(in)
			}
		case "img":
			out.Img = bool(in.Bool())
		case "con":
			out.Con = bool(in.Bool())
		case "tv":
			out.Tv = float64(in.Float64())
		case "spn":
			out.Spn = float64(in.Float64())
		case "sbf":
			out.Spf = float64(in.Float64())
		case "ltp":
			out.Ltp = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi11(out *jwriter.Writer, in MarketChange) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rc\":")
	if in.Rc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v99, v100 := range in.Rc {
			if v99 > 0 {
				out.RawByte(',')
			}
			(v100).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"marketDefinition\":")
	if in.MarketDefinition == nil {
		out.RawString("null")
	} else {
		(*in.MarketDefinition).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"img\":")
	out.Bool(bool(in.Img))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"con\":")
	out.Bool(bool(in.Con))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tv\":")
	out.Float64(float64(in.Tv))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"spn\":")
	out.Float64(float64(in.Spn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sbf\":")
	out.Float64(float64(in.Spf))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ltp\":")
	out.Float64(float64(in.Ltp))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi11(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi12(in *jlexer.Lexer, out *HeartbeatMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi12(out *jwriter.Writer, in HeartbeatMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"op\":")
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int32(int32(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeartbeatMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeartbeatMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeartbeatMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeartbeatMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi12(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi13(in *jlexer.Lexer, out *ConnectionMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "connectionId":
			out.ConnectionID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi13(out *jwriter.Writer, in ConnectionMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"op\":")
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.ID))
	}
	if in.ConnectionID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectionId\":")
		out.String(string(in.ConnectionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConnectionMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectionMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConnectionMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectionMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi13(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi14(in *jlexer.Lexer, out *ChangeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "ct":
			out.Ct = string(in.String())
		case "clk":
			out.Clk = string(in.String())
		case "heartbeatMs":
			out.HeartbeatMs = int64(in.Int64())
		case "pt":
			out.Pt = int64(in.Int64())
		case "initialClk":
			out.InitialClk = string(in.String())
		case "conflateMs":
			out.ConflateMs = int64(in.Int64())
		case "segmentType":
			out.SegmentType = string(in.String())
		case "mc":
			if in.IsNull() {
				in.Skip()
				out.Mc = nil
			} else {
				in.Delim('[')
				if out.Mc == nil {
					if !in.IsDelim(']') {
						out.Mc = make([]MarketChange, 0, 1)
					} else {
						out.Mc = []MarketChange{}
					}
				} else {
					out.Mc = (out.Mc)[:0]
				}
				for !in.IsDelim(']') {
					var v101 MarketChange
					(v101).UnmarshalEasyJSON(in)
					out.Mc = append(out.Mc, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oc":
			if in.IsNull() {
				in.Skip()
				out.Oc = nil
			} else {
				in.Delim('[')
				if out.Oc == nil {
					if !in.IsDelim(']') {
						out.Oc = make([]OrderChange, 0, 1)
					} else {
						out.Oc = []OrderChange{}
					}
				} else {
					out.Oc = (out.Oc)[:0]
				}
				for !in.IsDelim(']') {
					var v102 OrderChange
					(v102).UnmarshalEasyJSON(in)
					out.Oc = append(out.Oc, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi14(out *jwriter.Writer, in ChangeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"op\":")
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int(int(in.ID))
	}
	if in.Ct != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ct\":")
		out.String(string(in.Ct))
	}
	if in.Clk != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"clk\":")
		out.String(string(in.Clk))
	}
	if in.HeartbeatMs != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"heartbeatMs\":")
		out.Int64(int64(in.HeartbeatMs))
	}
	if in.Pt != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pt\":")
		out.Int64(int64(in.Pt))
	}
	if in.InitialClk != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"initialClk\":")
		out.String(string(in.InitialClk))
	}
	if in.ConflateMs != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"conflateMs\":")
		out.Int64(int64(in.ConflateMs))
	}
	if in.SegmentType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"segmentType\":")
		out.String(string(in.SegmentType))
	}
	if len(in.Mc) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mc\":")
		if in.Mc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v103, v104 := range in.Mc {
				if v103 > 0 {
					out.RawByte(',')
				}
				(v104).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Oc) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"oc\":")
		if in.Oc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v105, v106 := range in.Oc {
				if v105 > 0 {
					out.RawByte(',')
				}
				(v106).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi14(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi15(in *jlexer.Lexer, out *AuthMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int32(in.Int32())
		case "session":
			out.Session = string(in.String())
		case "appKey":
			out.AppKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi15(out *jwriter.Writer, in AuthMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"op\":")
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int32(int32(in.ID))
	}
	if in.Session != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"session\":")
		out.String(string(in.Session))
	}
	if in.AppKey != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"appKey\":")
		out.String(string(in.AppKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi15(l, v)
}
