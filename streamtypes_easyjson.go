// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bfapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson54c0b74dDecodeGithubComTarbBfapi(in *jlexer.Lexer, out *UnmatchedOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "rfo":
			out.Ref = string(in.String())
		case "p":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Price).UnmarshalJSON(data))
			}
		case "s":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Size).UnmarshalJSON(data))
			}
		case "bsp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BspLiability).UnmarshalJSON(data))
			}
		case "pd":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PlacedAt).UnmarshalJSON(data))
			}
		case "md":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MatchedAt).UnmarshalJSON(data))
			}
		case "ld":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LapsedAt).UnmarshalJSON(data))
			}
		case "avp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AvgPrice).UnmarshalJSON(data))
			}
		case "sm":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SizeMatched).UnmarshalJSON(data))
			}
		case "sr":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SizeRemaing).UnmarshalJSON(data))
			}
		case "sl":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SizeLapse).UnmarshalJSON(data))
			}
		case "sc":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SizeCanceled).UnmarshalJSON(data))
			}
		case "sv":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SizeVoided).UnmarshalJSON(data))
			}
		case "side":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Side).UnmarshalJSON(data))
			}
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		case "pt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PerType).UnmarshalJSON(data))
			}
		case "ot":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OrderType).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi(out *jwriter.Writer, in UnmatchedOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"rfo\":"
		out.RawString(prefix)
		out.String(string(in.Ref))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"bsp\":"
		out.RawString(prefix)
		out.Float64(float64(in.BspLiability))
	}
	{
		const prefix string = ",\"pd\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.PlacedAt))
	}
	{
		const prefix string = ",\"md\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MatchedAt))
	}
	{
		const prefix string = ",\"ld\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.LapsedAt))
	}
	{
		const prefix string = ",\"avp\":"
		out.RawString(prefix)
		out.Float64(float64(in.AvgPrice))
	}
	{
		const prefix string = ",\"sm\":"
		out.RawString(prefix)
		out.Float64(float64(in.SizeMatched))
	}
	{
		const prefix string = ",\"sr\":"
		out.RawString(prefix)
		out.Float64(float64(in.SizeRemaing))
	}
	{
		const prefix string = ",\"sl\":"
		out.RawString(prefix)
		out.Float64(float64(in.SizeLapse))
	}
	{
		const prefix string = ",\"sc\":"
		out.RawString(prefix)
		out.Float64(float64(in.SizeCanceled))
	}
	{
		const prefix string = ",\"sv\":"
		out.RawString(prefix)
		out.Float64(float64(in.SizeVoided))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.Raw((in.Side).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Status))
	}
	{
		const prefix string = ",\"pt\":"
		out.RawString(prefix)
		out.Raw((in.PerType).MarshalJSON())
	}
	{
		const prefix string = ",\"ot\":"
		out.RawString(prefix)
		out.Raw((in.OrderType).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnmatchedOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnmatchedOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnmatchedOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnmatchedOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi1(in *jlexer.Lexer, out *SubsMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "initialClk":
			out.InitialClk = string(in.String())
		case "clk":
			out.Clk = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "heartbeatMs":
			out.HeartbeatMs = Duration(in.Int64())
		case "conflateMs":
			out.ConflateMs = Duration(in.Int64())
		case "marketFilter":
			if in.IsNull() {
				in.Skip()
				out.MarketFilter = nil
			} else {
				if out.MarketFilter == nil {
					out.MarketFilter = new(MarketStreamFilter)
				}
				(*out.MarketFilter).UnmarshalEasyJSON(in)
			}
		case "marketDataFilter":
			if in.IsNull() {
				in.Skip()
				out.MarketDataFilter = nil
			} else {
				if out.MarketDataFilter == nil {
					out.MarketDataFilter = new(MarketDataFilter)
				}
				(*out.MarketDataFilter).UnmarshalEasyJSON(in)
			}
		case "orderFilter":
			if in.IsNull() {
				in.Skip()
				out.OrderFilter = nil
			} else {
				if out.OrderFilter == nil {
					out.OrderFilter = new(OrderFilter)
				}
				(*out.OrderFilter).UnmarshalEasyJSON(in)
			}
		case "segmentationEnabled":
			out.SegmentationEnabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi1(out *jwriter.Writer, in SubsMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		const prefix string = ",\"op\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	if in.InitialClk != "" {
		const prefix string = ",\"initialClk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitialClk))
	}
	if in.Clk != "" {
		const prefix string = ",\"clk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Clk))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	if in.HeartbeatMs != 0 {
		const prefix string = ",\"heartbeatMs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.HeartbeatMs))
	}
	{
		const prefix string = ",\"conflateMs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ConflateMs))
	}
	if in.MarketFilter != nil {
		const prefix string = ",\"marketFilter\":"
		out.RawString(prefix)
		(*in.MarketFilter).MarshalEasyJSON(out)
	}
	if in.MarketDataFilter != nil {
		const prefix string = ",\"marketDataFilter\":"
		out.RawString(prefix)
		(*in.MarketDataFilter).MarshalEasyJSON(out)
	}
	if in.OrderFilter != nil {
		const prefix string = ",\"orderFilter\":"
		out.RawString(prefix)
		(*in.OrderFilter).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"segmentationEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SegmentationEnabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubsMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubsMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubsMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubsMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi1(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi2(in *jlexer.Lexer, out *StrategyMatched) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mb":
			if in.IsNull() {
				in.Skip()
				out.MatchedBacks = nil
			} else {
				in.Delim('[')
				if out.MatchedBacks == nil {
					if !in.IsDelim(']') {
						out.MatchedBacks = make([][2]PriceVol, 0, 4)
					} else {
						out.MatchedBacks = [][2]PriceVol{}
					}
				} else {
					out.MatchedBacks = (out.MatchedBacks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v2 := 0
						for !in.IsDelim(']') {
							if v2 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v1)[v2]).UnmarshalJSON(data))
								}
								v2++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.MatchedBacks = append(out.MatchedBacks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ml":
			if in.IsNull() {
				in.Skip()
				out.MatchedLays = nil
			} else {
				in.Delim('[')
				if out.MatchedLays == nil {
					if !in.IsDelim(']') {
						out.MatchedLays = make([][2]PriceVol, 0, 4)
					} else {
						out.MatchedLays = [][2]PriceVol{}
					}
				} else {
					out.MatchedLays = (out.MatchedLays)[:0]
				}
				for !in.IsDelim(']') {
					var v3 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v4 := 0
						for !in.IsDelim(']') {
							if v4 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v3)[v4]).UnmarshalJSON(data))
								}
								v4++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.MatchedLays = append(out.MatchedLays, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi2(out *jwriter.Writer, in StrategyMatched) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mb\":"
		out.RawString(prefix[1:])
		if in.MatchedBacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.MatchedBacks {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v7 := range v6 {
					if v7 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v6)[v7]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ml\":"
		out.RawString(prefix)
		if in.MatchedLays == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.MatchedLays {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v10 := range v9 {
					if v10 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v9)[v10]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StrategyMatched) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StrategyMatched) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StrategyMatched) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StrategyMatched) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi2(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi3(in *jlexer.Lexer, out *StatusMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "op":
			out.Op = string(in.String())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "errorCode":
			out.ErrorCode = string(in.String())
		case "connectionId":
			out.ConnectionID = string(in.String())
		case "statusCode":
			out.StatusCode = string(in.String())
		case "connectionClosed":
			out.ConnectionClosed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi3(out *jwriter.Writer, in StatusMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.String(string(in.ErrorCode))
	}
	{
		const prefix string = ",\"connectionId\":"
		out.RawString(prefix)
		out.String(string(in.ConnectionID))
	}
	{
		const prefix string = ",\"statusCode\":"
		out.RawString(prefix)
		out.String(string(in.StatusCode))
	}
	{
		const prefix string = ",\"connectionClosed\":"
		out.RawString(prefix)
		out.Bool(bool(in.ConnectionClosed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatusMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatusMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatusMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatusMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi3(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi4(in *jlexer.Lexer, out *RunnerOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.SelectionID = SelectionID(in.Uint64())
		case "hc":
			out.Handicap = float64(in.Float64())
		case "uo":
			if in.IsNull() {
				in.Skip()
				out.Unmatched = nil
			} else {
				in.Delim('[')
				if out.Unmatched == nil {
					if !in.IsDelim(']') {
						out.Unmatched = make([]UnmatchedOrder, 0, 1)
					} else {
						out.Unmatched = []UnmatchedOrder{}
					}
				} else {
					out.Unmatched = (out.Unmatched)[:0]
				}
				for !in.IsDelim(']') {
					var v11 UnmatchedOrder
					(v11).UnmarshalEasyJSON(in)
					out.Unmatched = append(out.Unmatched, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "smc":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.StratMatched = make(map[string]StrategyMatched)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 StrategyMatched
					(v12).UnmarshalEasyJSON(in)
					(out.StratMatched)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "mb":
			if in.IsNull() {
				in.Skip()
				out.MatchedBacks = nil
			} else {
				in.Delim('[')
				if out.MatchedBacks == nil {
					if !in.IsDelim(']') {
						out.MatchedBacks = make([][2]PriceVol, 0, 4)
					} else {
						out.MatchedBacks = [][2]PriceVol{}
					}
				} else {
					out.MatchedBacks = (out.MatchedBacks)[:0]
				}
				for !in.IsDelim(']') {
					var v13 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v14 := 0
						for !in.IsDelim(']') {
							if v14 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v13)[v14]).UnmarshalJSON(data))
								}
								v14++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.MatchedBacks = append(out.MatchedBacks, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ml":
			if in.IsNull() {
				in.Skip()
				out.MatchedLays = nil
			} else {
				in.Delim('[')
				if out.MatchedLays == nil {
					if !in.IsDelim(']') {
						out.MatchedLays = make([][2]PriceVol, 0, 4)
					} else {
						out.MatchedLays = [][2]PriceVol{}
					}
				} else {
					out.MatchedLays = (out.MatchedLays)[:0]
				}
				for !in.IsDelim(']') {
					var v15 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v16 := 0
						for !in.IsDelim(']') {
							if v16 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v15)[v16]).UnmarshalJSON(data))
								}
								v16++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.MatchedLays = append(out.MatchedLays, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fullImage":
			out.Image = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi4(out *jwriter.Writer, in RunnerOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.SelectionID))
	}
	{
		const prefix string = ",\"hc\":"
		out.RawString(prefix)
		out.Float64(float64(in.Handicap))
	}
	{
		const prefix string = ",\"uo\":"
		out.RawString(prefix)
		if in.Unmatched == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Unmatched {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"smc\":"
		out.RawString(prefix)
		if in.StratMatched == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.StratMatched {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				(v19Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"mb\":"
		out.RawString(prefix)
		if in.MatchedBacks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.MatchedBacks {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v22 := range v21 {
					if v22 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v21)[v22]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ml\":"
		out.RawString(prefix)
		if in.MatchedLays == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.MatchedLays {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v25 := range v24 {
					if v25 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v24)[v25]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"fullImage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi4(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi5(in *jlexer.Lexer, out *RunnerDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.SelectionName = string(in.String())
		case "sortPriority":
			out.SortPriority = int(in.Int())
		case "bsp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Sp).UnmarshalJSON(data))
			}
		case "id":
			out.SelectionID = SelectionID(in.Uint64())
		case "adjustmentFactor":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AdjustmentFactor).UnmarshalJSON(data))
			}
		case "removalDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RemovalDate).UnmarshalJSON(data))
			}
		case "hc":
			out.Handicap = float64(in.Float64())
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi5(out *jwriter.Writer, in RunnerDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelectionName != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SelectionName))
	}
	if in.SortPriority != 0 {
		const prefix string = ",\"sortPriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SortPriority))
	}
	if in.Sp != 0 {
		const prefix string = ",\"bsp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Sp))
	}
	if in.SelectionID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.SelectionID))
	}
	if in.AdjustmentFactor != 0 {
		const prefix string = ",\"adjustmentFactor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AdjustmentFactor))
	}
	if in.RemovalDate != 0 {
		const prefix string = ",\"removalDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.RemovalDate))
	}
	if in.Handicap != 0 {
		const prefix string = ",\"hc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Handicap))
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi5(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi6(in *jlexer.Lexer, out *RunnerChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = SelectionID(in.Uint64())
		case "spn":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Spn).UnmarshalJSON(data))
			}
		case "sbf":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Spf).UnmarshalJSON(data))
			}
		case "ltp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ltp).UnmarshalJSON(data))
			}
		case "tv":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Tv).UnmarshalJSON(data))
			}
		case "bdatb":
			if in.IsNull() {
				in.Skip()
				out.Bdatb = nil
			} else {
				in.Delim('[')
				if out.Bdatb == nil {
					if !in.IsDelim(']') {
						out.Bdatb = make([][3]PriceVol, 0, 2)
					} else {
						out.Bdatb = [][3]PriceVol{}
					}
				} else {
					out.Bdatb = (out.Bdatb)[:0]
				}
				for !in.IsDelim(']') {
					var v26 [3]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v27 := 0
						for !in.IsDelim(']') {
							if v27 < 3 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v26)[v27]).UnmarshalJSON(data))
								}
								v27++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bdatb = append(out.Bdatb, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bdatl":
			if in.IsNull() {
				in.Skip()
				out.Bdatl = nil
			} else {
				in.Delim('[')
				if out.Bdatl == nil {
					if !in.IsDelim(']') {
						out.Bdatl = make([][3]PriceVol, 0, 2)
					} else {
						out.Bdatl = [][3]PriceVol{}
					}
				} else {
					out.Bdatl = (out.Bdatl)[:0]
				}
				for !in.IsDelim(']') {
					var v28 [3]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v29 := 0
						for !in.IsDelim(']') {
							if v29 < 3 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v28)[v29]).UnmarshalJSON(data))
								}
								v29++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bdatl = append(out.Bdatl, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "batb":
			if in.IsNull() {
				in.Skip()
				out.Batb = nil
			} else {
				in.Delim('[')
				if out.Batb == nil {
					if !in.IsDelim(']') {
						out.Batb = make([][3]PriceVol, 0, 2)
					} else {
						out.Batb = [][3]PriceVol{}
					}
				} else {
					out.Batb = (out.Batb)[:0]
				}
				for !in.IsDelim(']') {
					var v30 [3]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v31 := 0
						for !in.IsDelim(']') {
							if v31 < 3 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v30)[v31]).UnmarshalJSON(data))
								}
								v31++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Batb = append(out.Batb, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "batl":
			if in.IsNull() {
				in.Skip()
				out.Batl = nil
			} else {
				in.Delim('[')
				if out.Batl == nil {
					if !in.IsDelim(']') {
						out.Batl = make([][3]PriceVol, 0, 2)
					} else {
						out.Batl = [][3]PriceVol{}
					}
				} else {
					out.Batl = (out.Batl)[:0]
				}
				for !in.IsDelim(']') {
					var v32 [3]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v33 := 0
						for !in.IsDelim(']') {
							if v33 < 3 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v32)[v33]).UnmarshalJSON(data))
								}
								v33++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Batl = append(out.Batl, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "atb":
			if in.IsNull() {
				in.Skip()
				out.Atb = nil
			} else {
				in.Delim('[')
				if out.Atb == nil {
					if !in.IsDelim(']') {
						out.Atb = make([][2]PriceVol, 0, 4)
					} else {
						out.Atb = [][2]PriceVol{}
					}
				} else {
					out.Atb = (out.Atb)[:0]
				}
				for !in.IsDelim(']') {
					var v34 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v35 := 0
						for !in.IsDelim(']') {
							if v35 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v34)[v35]).UnmarshalJSON(data))
								}
								v35++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Atb = append(out.Atb, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "atl":
			if in.IsNull() {
				in.Skip()
				out.Atl = nil
			} else {
				in.Delim('[')
				if out.Atl == nil {
					if !in.IsDelim(']') {
						out.Atl = make([][2]PriceVol, 0, 4)
					} else {
						out.Atl = [][2]PriceVol{}
					}
				} else {
					out.Atl = (out.Atl)[:0]
				}
				for !in.IsDelim(']') {
					var v36 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v37 := 0
						for !in.IsDelim(']') {
							if v37 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v36)[v37]).UnmarshalJSON(data))
								}
								v37++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Atl = append(out.Atl, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trd":
			if in.IsNull() {
				in.Skip()
				out.Trd = nil
			} else {
				in.Delim('[')
				if out.Trd == nil {
					if !in.IsDelim(']') {
						out.Trd = make([][2]PriceVol, 0, 4)
					} else {
						out.Trd = [][2]PriceVol{}
					}
				} else {
					out.Trd = (out.Trd)[:0]
				}
				for !in.IsDelim(']') {
					var v38 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v39 := 0
						for !in.IsDelim(']') {
							if v39 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v38)[v39]).UnmarshalJSON(data))
								}
								v39++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Trd = append(out.Trd, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "spb":
			if in.IsNull() {
				in.Skip()
				out.Spb = nil
			} else {
				in.Delim('[')
				if out.Spb == nil {
					if !in.IsDelim(']') {
						out.Spb = make([][2]PriceVol, 0, 4)
					} else {
						out.Spb = [][2]PriceVol{}
					}
				} else {
					out.Spb = (out.Spb)[:0]
				}
				for !in.IsDelim(']') {
					var v40 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v41 := 0
						for !in.IsDelim(']') {
							if v41 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v40)[v41]).UnmarshalJSON(data))
								}
								v41++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Spb = append(out.Spb, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "spl":
			if in.IsNull() {
				in.Skip()
				out.Spl = nil
			} else {
				in.Delim('[')
				if out.Spl == nil {
					if !in.IsDelim(']') {
						out.Spl = make([][2]PriceVol, 0, 4)
					} else {
						out.Spl = [][2]PriceVol{}
					}
				} else {
					out.Spl = (out.Spl)[:0]
				}
				for !in.IsDelim(']') {
					var v42 [2]PriceVol
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v43 := 0
						for !in.IsDelim(']') {
							if v43 < 2 {
								if data := in.Raw(); in.Ok() {
									in.AddError(((v42)[v43]).UnmarshalJSON(data))
								}
								v43++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Spl = append(out.Spl, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi6(out *jwriter.Writer, in RunnerChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"spn\":"
		out.RawString(prefix)
		out.Float64(float64(in.Spn))
	}
	{
		const prefix string = ",\"sbf\":"
		out.RawString(prefix)
		out.Float64(float64(in.Spf))
	}
	{
		const prefix string = ",\"ltp\":"
		out.RawString(prefix)
		out.Float64(float64(in.Ltp))
	}
	{
		const prefix string = ",\"tv\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tv))
	}
	{
		const prefix string = ",\"bdatb\":"
		out.RawString(prefix)
		if in.Bdatb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Bdatb {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v46 := range v45 {
					if v46 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v45)[v46]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bdatl\":"
		out.RawString(prefix)
		if in.Bdatl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Bdatl {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v49 := range v48 {
					if v49 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v48)[v49]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"batb\":"
		out.RawString(prefix)
		if in.Batb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Batb {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v52 := range v51 {
					if v52 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v51)[v52]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"batl\":"
		out.RawString(prefix)
		if in.Batl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Batl {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v55 := range v54 {
					if v55 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v54)[v55]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"atb\":"
		out.RawString(prefix)
		if in.Atb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Atb {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v58 := range v57 {
					if v58 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v57)[v58]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"atl\":"
		out.RawString(prefix)
		if in.Atl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Atl {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v61 := range v60 {
					if v61 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v60)[v61]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"trd\":"
		out.RawString(prefix)
		if in.Trd == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Trd {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v64 := range v63 {
					if v64 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v63)[v64]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"spb\":"
		out.RawString(prefix)
		if in.Spb == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Spb {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v67 := range v66 {
					if v67 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v66)[v67]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"spl\":"
		out.RawString(prefix)
		if in.Spl == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Spl {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v70 := range v69 {
					if v70 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v69)[v70]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RunnerChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RunnerChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RunnerChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RunnerChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi6(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi7(in *jlexer.Lexer, out *OrderFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountIds":
			if in.IsNull() {
				in.Skip()
				out.AccountIds = nil
			} else {
				in.Delim('[')
				if out.AccountIds == nil {
					if !in.IsDelim(']') {
						out.AccountIds = make([]int64, 0, 8)
					} else {
						out.AccountIds = []int64{}
					}
				} else {
					out.AccountIds = (out.AccountIds)[:0]
				}
				for !in.IsDelim(']') {
					var v71 int64
					v71 = int64(in.Int64())
					out.AccountIds = append(out.AccountIds, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customerStrategyRefs":
			if in.IsNull() {
				in.Skip()
				out.CustomerStrategyRefs = nil
			} else {
				in.Delim('[')
				if out.CustomerStrategyRefs == nil {
					if !in.IsDelim(']') {
						out.CustomerStrategyRefs = make([]string, 0, 4)
					} else {
						out.CustomerStrategyRefs = []string{}
					}
				} else {
					out.CustomerStrategyRefs = (out.CustomerStrategyRefs)[:0]
				}
				for !in.IsDelim(']') {
					var v72 string
					v72 = string(in.String())
					out.CustomerStrategyRefs = append(out.CustomerStrategyRefs, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "includeOverallPosition":
			out.IncludeOverallPosition = bool(in.Bool())
		case "partitionMatchedByStrategyRef":
			out.PartitionMatchedByStrategyRef = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi7(out *jwriter.Writer, in OrderFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AccountIds) != 0 {
		const prefix string = ",\"accountIds\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v73, v74 := range in.AccountIds {
				if v73 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v74))
			}
			out.RawByte(']')
		}
	}
	if len(in.CustomerStrategyRefs) != 0 {
		const prefix string = ",\"customerStrategyRefs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.CustomerStrategyRefs {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"includeOverallPosition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IncludeOverallPosition))
	}
	{
		const prefix string = ",\"partitionMatchedByStrategyRef\":"
		out.RawString(prefix)
		out.Bool(bool(in.PartitionMatchedByStrategyRef))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi7(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi8(in *jlexer.Lexer, out *OrderChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketID).UnmarshalJSON(data))
			}
		case "orc":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]RunnerOrder, 0, 1)
					} else {
						out.Runners = []RunnerOrder{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v77 RunnerOrder
					(v77).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "closed":
			if in.IsNull() {
				in.Skip()
				out.Closed = nil
			} else {
				if out.Closed == nil {
					out.Closed = new(bool)
				}
				*out.Closed = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi8(out *jwriter.Writer, in OrderChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Raw((in.MarketID).MarshalJSON())
	}
	{
		const prefix string = ",\"orc\":"
		out.RawString(prefix)
		if in.Runners == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Runners {
				if v78 > 0 {
					out.RawByte(',')
				}
				(v79).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		if in.Closed == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Closed))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi8(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi9(in *jlexer.Lexer, out *MarketStreamFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marketIds":
			if in.IsNull() {
				in.Skip()
				out.MarketIds = nil
			} else {
				in.Delim('[')
				if out.MarketIds == nil {
					if !in.IsDelim(']') {
						out.MarketIds = make([]string, 0, 4)
					} else {
						out.MarketIds = []string{}
					}
				} else {
					out.MarketIds = (out.MarketIds)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.MarketIds = append(out.MarketIds, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "countryCodes":
			if in.IsNull() {
				in.Skip()
				out.CountryCodes = nil
			} else {
				in.Delim('[')
				if out.CountryCodes == nil {
					if !in.IsDelim(']') {
						out.CountryCodes = make([]string, 0, 4)
					} else {
						out.CountryCodes = []string{}
					}
				} else {
					out.CountryCodes = (out.CountryCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v81 string
					v81 = string(in.String())
					out.CountryCodes = append(out.CountryCodes, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bettingTypes":
			if in.IsNull() {
				in.Skip()
				out.BettingTypes = nil
			} else {
				in.Delim('[')
				if out.BettingTypes == nil {
					if !in.IsDelim(']') {
						out.BettingTypes = make([]string, 0, 4)
					} else {
						out.BettingTypes = []string{}
					}
				} else {
					out.BettingTypes = (out.BettingTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.BettingTypes = append(out.BettingTypes, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketTypes":
			if in.IsNull() {
				in.Skip()
				out.MarketTypes = nil
			} else {
				in.Delim('[')
				if out.MarketTypes == nil {
					if !in.IsDelim(']') {
						out.MarketTypes = make([]string, 0, 4)
					} else {
						out.MarketTypes = []string{}
					}
				} else {
					out.MarketTypes = (out.MarketTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v83 string
					v83 = string(in.String())
					out.MarketTypes = append(out.MarketTypes, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "venues":
			if in.IsNull() {
				in.Skip()
				out.Venues = nil
			} else {
				in.Delim('[')
				if out.Venues == nil {
					if !in.IsDelim(']') {
						out.Venues = make([]string, 0, 4)
					} else {
						out.Venues = []string{}
					}
				} else {
					out.Venues = (out.Venues)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.Venues = append(out.Venues, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventTypeIds":
			if in.IsNull() {
				in.Skip()
				out.EventTypeIds = nil
			} else {
				in.Delim('[')
				if out.EventTypeIds == nil {
					if !in.IsDelim(']') {
						out.EventTypeIds = make([]string, 0, 4)
					} else {
						out.EventTypeIds = []string{}
					}
				} else {
					out.EventTypeIds = (out.EventTypeIds)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.EventTypeIds = append(out.EventTypeIds, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "eventIds":
			if in.IsNull() {
				in.Skip()
				out.EventIds = nil
			} else {
				in.Delim('[')
				if out.EventIds == nil {
					if !in.IsDelim(']') {
						out.EventIds = make([]string, 0, 4)
					} else {
						out.EventIds = []string{}
					}
				} else {
					out.EventIds = (out.EventIds)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.EventIds = append(out.EventIds, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "turnInPlayEnabled":
			out.TurnInPlayEnabled = bool(in.Bool())
		case "bspMarket":
			out.BspMarket = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi9(out *jwriter.Writer, in MarketStreamFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MarketIds) != 0 {
		const prefix string = ",\"marketIds\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v87, v88 := range in.MarketIds {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	if len(in.CountryCodes) != 0 {
		const prefix string = ",\"countryCodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v89, v90 := range in.CountryCodes {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	if len(in.BettingTypes) != 0 {
		const prefix string = ",\"bettingTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v91, v92 := range in.BettingTypes {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.String(string(v92))
			}
			out.RawByte(']')
		}
	}
	if len(in.MarketTypes) != 0 {
		const prefix string = ",\"marketTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v93, v94 := range in.MarketTypes {
				if v93 > 0 {
					out.RawByte(',')
				}
				out.String(string(v94))
			}
			out.RawByte(']')
		}
	}
	if len(in.Venues) != 0 {
		const prefix string = ",\"venues\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v95, v96 := range in.Venues {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.String(string(v96))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventTypeIds) != 0 {
		const prefix string = ",\"eventTypeIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v97, v98 := range in.EventTypeIds {
				if v97 > 0 {
					out.RawByte(',')
				}
				out.String(string(v98))
			}
			out.RawByte(']')
		}
	}
	if len(in.EventIds) != 0 {
		const prefix string = ",\"eventIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v99, v100 := range in.EventIds {
				if v99 > 0 {
					out.RawByte(',')
				}
				out.String(string(v100))
			}
			out.RawByte(']')
		}
	}
	if in.TurnInPlayEnabled {
		const prefix string = ",\"turnInPlayEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TurnInPlayEnabled))
	}
	if in.BspMarket {
		const prefix string = ",\"bspMarket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BspMarket))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketStreamFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketStreamFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketStreamFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketStreamFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi9(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi10(in *jlexer.Lexer, out *MarketDefinition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "venue":
			out.Venue = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "marketType":
			out.MarketType = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "bettingType":
			out.BettingType = string(in.String())
		case "eventId":
			out.EventID = string(in.String())
		case "eventTypeId":
			out.EventTypeID = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "betDelay":
			out.BetDelay = int(in.Int())
		case "numberOfWinners":
			out.NumberOfWinners = int(in.Int())
		case "numberOfActiveRunners":
			out.NumberOfActiveRunners = int(in.Int())
		case "eachWayDivisor":
			out.EachWayDivisor = float64(in.Float64())
		case "marketBaseRate":
			out.MarketBaseRate = float64(in.Float64())
		case "lineMaxUnit":
			out.LineMaxUnit = float64(in.Float64())
		case "lineMinUnit":
			out.LineMinUnit = float64(in.Float64())
		case "lineInterval":
			out.LineInterval = float64(in.Float64())
		case "regulators":
			if in.IsNull() {
				in.Skip()
				out.Regulators = nil
			} else {
				in.Delim('[')
				if out.Regulators == nil {
					if !in.IsDelim(']') {
						out.Regulators = make([]string, 0, 4)
					} else {
						out.Regulators = []string{}
					}
				} else {
					out.Regulators = (out.Regulators)[:0]
				}
				for !in.IsDelim(']') {
					var v101 string
					v101 = string(in.String())
					out.Regulators = append(out.Regulators, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "runners":
			if in.IsNull() {
				in.Skip()
				out.Runners = nil
			} else {
				in.Delim('[')
				if out.Runners == nil {
					if !in.IsDelim(']') {
						out.Runners = make([]RunnerDefinition, 0, 1)
					} else {
						out.Runners = []RunnerDefinition{}
					}
				} else {
					out.Runners = (out.Runners)[:0]
				}
				for !in.IsDelim(']') {
					var v102 RunnerDefinition
					(v102).UnmarshalEasyJSON(in)
					out.Runners = append(out.Runners, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "suspendTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SuspendTime).UnmarshalJSON(data))
			}
		case "settledTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SettledTime).UnmarshalJSON(data))
			}
		case "openDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OpenDate).UnmarshalJSON(data))
			}
		case "marketTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MarketTime).UnmarshalJSON(data))
			}
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		case "inPlay":
			out.InPlay = bool(in.Bool())
		case "bspMarket":
			out.BspMarket = bool(in.Bool())
		case "crossMatching":
			out.CrossMatching = bool(in.Bool())
		case "runnersVoidable":
			out.RunnersVoidable = bool(in.Bool())
		case "turnInPlayEnabled":
			out.TurnInPlayEnabled = bool(in.Bool())
		case "persistenceEnabled":
			out.PersistenceEnabled = bool(in.Bool())
		case "discountAllowed":
			out.DiscountAllowed = bool(in.Bool())
		case "complete":
			out.Complete = bool(in.Bool())
		case "bspReconciled":
			out.BspReconciled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi10(out *jwriter.Writer, in MarketDefinition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Venue != "" {
		const prefix string = ",\"venue\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Venue))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.MarketType != "" {
		const prefix string = ",\"marketType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarketType))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"countryCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.BettingType != "" {
		const prefix string = ",\"bettingType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BettingType))
	}
	if in.EventID != "" {
		const prefix string = ",\"eventId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventID))
	}
	if in.EventTypeID != "" {
		const prefix string = ",\"eventTypeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventTypeID))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if in.BetDelay != 0 {
		const prefix string = ",\"betDelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BetDelay))
	}
	if in.NumberOfWinners != 0 {
		const prefix string = ",\"numberOfWinners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfWinners))
	}
	if in.NumberOfActiveRunners != 0 {
		const prefix string = ",\"numberOfActiveRunners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfActiveRunners))
	}
	if in.EachWayDivisor != 0 {
		const prefix string = ",\"eachWayDivisor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.EachWayDivisor))
	}
	if in.MarketBaseRate != 0 {
		const prefix string = ",\"marketBaseRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MarketBaseRate))
	}
	if in.LineMaxUnit != 0 {
		const prefix string = ",\"lineMaxUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.LineMaxUnit))
	}
	if in.LineMinUnit != 0 {
		const prefix string = ",\"lineMinUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.LineMinUnit))
	}
	if in.LineInterval != 0 {
		const prefix string = ",\"lineInterval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.LineInterval))
	}
	if len(in.Regulators) != 0 {
		const prefix string = ",\"regulators\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v103, v104 := range in.Regulators {
				if v103 > 0 {
					out.RawByte(',')
				}
				out.String(string(v104))
			}
			out.RawByte(']')
		}
	}
	if len(in.Runners) != 0 {
		const prefix string = ",\"runners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v105, v106 := range in.Runners {
				if v105 > 0 {
					out.RawByte(',')
				}
				(v106).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.SuspendTime != 0 {
		const prefix string = ",\"suspendTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.SuspendTime))
	}
	if in.SettledTime != 0 {
		const prefix string = ",\"settledTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.SettledTime))
	}
	if in.OpenDate != 0 {
		const prefix string = ",\"openDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.OpenDate))
	}
	if in.MarketTime != 0 {
		const prefix string = ",\"marketTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.MarketTime))
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Status))
	}
	if in.InPlay {
		const prefix string = ",\"inPlay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.InPlay))
	}
	if in.BspMarket {
		const prefix string = ",\"bspMarket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BspMarket))
	}
	if in.CrossMatching {
		const prefix string = ",\"crossMatching\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CrossMatching))
	}
	if in.RunnersVoidable {
		const prefix string = ",\"runnersVoidable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RunnersVoidable))
	}
	if in.TurnInPlayEnabled {
		const prefix string = ",\"turnInPlayEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TurnInPlayEnabled))
	}
	if in.PersistenceEnabled {
		const prefix string = ",\"persistenceEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PersistenceEnabled))
	}
	if in.DiscountAllowed {
		const prefix string = ",\"discountAllowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DiscountAllowed))
	}
	if in.Complete {
		const prefix string = ",\"complete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Complete))
	}
	if in.BspReconciled {
		const prefix string = ",\"bspReconciled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BspReconciled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDefinition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDefinition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDefinition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDefinition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi10(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi11(in *jlexer.Lexer, out *MarketDataFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ladderLevels":
			out.LadderLevels = int(in.Int())
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v107 string
					v107 = string(in.String())
					out.Fields = append(out.Fields, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi11(out *jwriter.Writer, in MarketDataFilter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LadderLevels != 0 {
		const prefix string = ",\"ladderLevels\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.LadderLevels))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v108, v109 := range in.Fields {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.String(string(v109))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketDataFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketDataFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi11(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi12(in *jlexer.Lexer, out *MarketChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "rc":
			if in.IsNull() {
				in.Skip()
				out.Rc = nil
			} else {
				in.Delim('[')
				if out.Rc == nil {
					if !in.IsDelim(']') {
						out.Rc = make([]RunnerChange, 0, 1)
					} else {
						out.Rc = []RunnerChange{}
					}
				} else {
					out.Rc = (out.Rc)[:0]
				}
				for !in.IsDelim(']') {
					var v110 RunnerChange
					(v110).UnmarshalEasyJSON(in)
					out.Rc = append(out.Rc, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "marketDefinition":
			if in.IsNull() {
				in.Skip()
				out.MarketDefinition = nil
			} else {
				if out.MarketDefinition == nil {
					out.MarketDefinition = new(MarketDefinition)
				}
				(*out.MarketDefinition).UnmarshalEasyJSON(in)
			}
		case "tv":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Tv).UnmarshalJSON(data))
			}
		case "img":
			out.Img = bool(in.Bool())
		case "con":
			out.Con = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi12(out *jwriter.Writer, in MarketChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"rc\":"
		out.RawString(prefix)
		if in.Rc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v111, v112 := range in.Rc {
				if v111 > 0 {
					out.RawByte(',')
				}
				(v112).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"marketDefinition\":"
		out.RawString(prefix)
		if in.MarketDefinition == nil {
			out.RawString("null")
		} else {
			(*in.MarketDefinition).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"tv\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tv))
	}
	{
		const prefix string = ",\"img\":"
		out.RawString(prefix)
		out.Bool(bool(in.Img))
	}
	{
		const prefix string = ",\"con\":"
		out.RawString(prefix)
		out.Bool(bool(in.Con))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi12(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi13(in *jlexer.Lexer, out *HeartbeatMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi13(out *jwriter.Writer, in HeartbeatMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		const prefix string = ",\"op\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeartbeatMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeartbeatMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeartbeatMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeartbeatMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi13(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi14(in *jlexer.Lexer, out *ConnectionMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "connectionId":
			out.ConnectionID = string(in.String())
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi14(out *jwriter.Writer, in ConnectionMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"connectionId\":"
		out.RawString(prefix)
		out.String(string(in.ConnectionID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConnectionMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectionMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConnectionMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectionMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi14(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi15(in *jlexer.Lexer, out *ChangeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "clk":
			out.Clk = string(in.String())
		case "heartbeatMs":
			out.HeartbeatMs = Duration(in.Int64())
		case "pt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Pt).UnmarshalJSON(data))
			}
		case "initialClk":
			out.InitialClk = string(in.String())
		case "conflateMs":
			out.ConflateMs = Duration(in.Int64())
		case "segmentType":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SegmentType).UnmarshalJSON(data))
			}
		case "mc":
			if in.IsNull() {
				in.Skip()
				out.Mc = nil
			} else {
				in.Delim('[')
				if out.Mc == nil {
					if !in.IsDelim(']') {
						out.Mc = make([]MarketChange, 0, 1)
					} else {
						out.Mc = []MarketChange{}
					}
				} else {
					out.Mc = (out.Mc)[:0]
				}
				for !in.IsDelim(']') {
					var v113 MarketChange
					(v113).UnmarshalEasyJSON(in)
					out.Mc = append(out.Mc, v113)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oc":
			if in.IsNull() {
				in.Skip()
				out.Oc = nil
			} else {
				in.Delim('[')
				if out.Oc == nil {
					if !in.IsDelim(']') {
						out.Oc = make([]OrderChange, 0, 1)
					} else {
						out.Oc = []OrderChange{}
					}
				} else {
					out.Oc = (out.Oc)[:0]
				}
				for !in.IsDelim(']') {
					var v114 OrderChange
					(v114).UnmarshalEasyJSON(in)
					out.Oc = append(out.Oc, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ct":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ct).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi15(out *jwriter.Writer, in ChangeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"clk\":"
		out.RawString(prefix)
		out.String(string(in.Clk))
	}
	{
		const prefix string = ",\"heartbeatMs\":"
		out.RawString(prefix)
		out.Int64(int64(in.HeartbeatMs))
	}
	{
		const prefix string = ",\"pt\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Pt))
	}
	{
		const prefix string = ",\"initialClk\":"
		out.RawString(prefix)
		out.String(string(in.InitialClk))
	}
	{
		const prefix string = ",\"conflateMs\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConflateMs))
	}
	{
		const prefix string = ",\"segmentType\":"
		out.RawString(prefix)
		out.Raw((in.SegmentType).MarshalJSON())
	}
	{
		const prefix string = ",\"mc\":"
		out.RawString(prefix)
		if in.Mc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v115, v116 := range in.Mc {
				if v115 > 0 {
					out.RawByte(',')
				}
				(v116).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"oc\":"
		out.RawString(prefix)
		if in.Oc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v117, v118 := range in.Oc {
				if v117 > 0 {
					out.RawByte(',')
				}
				(v118).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ct\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ct))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi15(l, v)
}
func easyjson54c0b74dDecodeGithubComTarbBfapi16(in *jlexer.Lexer, out *AuthMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "session":
			out.Session = string(in.String())
		case "appKey":
			out.AppKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson54c0b74dEncodeGithubComTarbBfapi16(out *jwriter.Writer, in AuthMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Op != "" {
		const prefix string = ",\"op\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	if in.Session != "" {
		const prefix string = ",\"session\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Session))
	}
	if in.AppKey != "" {
		const prefix string = ",\"appKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson54c0b74dEncodeGithubComTarbBfapi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson54c0b74dEncodeGithubComTarbBfapi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson54c0b74dDecodeGithubComTarbBfapi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson54c0b74dDecodeGithubComTarbBfapi16(l, v)
}
