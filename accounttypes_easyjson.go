// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bfapi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCaf77204DecodeGithubComTarbBfapi(in *jlexer.Lexer, out *AccountFundsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availableToBetBalance":
			out.AvailableBalance = float64(in.Float64())
		case "exposure":
			out.Exposure = float64(in.Float64())
		case "retainedCommission":
			out.RetainedCommission = float64(in.Float64())
		case "exposureLimit":
			out.ExposureLimit = float64(in.Float64())
		case "discountRate":
			out.DiscountRate = float64(in.Float64())
		case "pointsBalance":
			out.PointsBalance = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCaf77204EncodeGithubComTarbBfapi(out *jwriter.Writer, in AccountFundsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AvailableBalance != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"availableToBetBalance\":")
		out.Float64(float64(in.AvailableBalance))
	}
	if in.Exposure != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exposure\":")
		out.Float64(float64(in.Exposure))
	}
	if in.RetainedCommission != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"retainedCommission\":")
		out.Float64(float64(in.RetainedCommission))
	}
	if in.ExposureLimit != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exposureLimit\":")
		out.Float64(float64(in.ExposureLimit))
	}
	if in.DiscountRate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"discountRate\":")
		out.Float64(float64(in.DiscountRate))
	}
	if in.PointsBalance != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pointsBalance\":")
		out.Int(int(in.PointsBalance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountFundsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCaf77204EncodeGithubComTarbBfapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountFundsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCaf77204EncodeGithubComTarbBfapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountFundsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCaf77204DecodeGithubComTarbBfapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountFundsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCaf77204DecodeGithubComTarbBfapi(l, v)
}
func easyjsonCaf77204DecodeGithubComTarbBfapi1(in *jlexer.Lexer, out *AccountDetailsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "localeCode":
			out.LocaleCode = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "discountRate":
			out.DiscountRate = float64(in.Float64())
		case "pointsBalance":
			out.PointsBalance = int(in.Int())
		case "countryCode":
			out.CountryCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCaf77204EncodeGithubComTarbBfapi1(out *jwriter.Writer, in AccountDetailsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrencyCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"currencyCode\":")
		out.String(string(in.CurrencyCode))
	}
	if in.FirstName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"firstName\":")
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lastName\":")
		out.String(string(in.LastName))
	}
	if in.LocaleCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"localeCode\":")
		out.String(string(in.LocaleCode))
	}
	if in.Region != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"region\":")
		out.String(string(in.Region))
	}
	if in.Timezone != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timezone\":")
		out.String(string(in.Timezone))
	}
	if in.DiscountRate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"discountRate\":")
		out.Float64(float64(in.DiscountRate))
	}
	if in.PointsBalance != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pointsBalance\":")
		out.Int(int(in.PointsBalance))
	}
	if in.CountryCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"countryCode\":")
		out.String(string(in.CountryCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountDetailsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCaf77204EncodeGithubComTarbBfapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountDetailsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCaf77204EncodeGithubComTarbBfapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountDetailsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCaf77204DecodeGithubComTarbBfapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountDetailsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCaf77204DecodeGithubComTarbBfapi1(l, v)
}
